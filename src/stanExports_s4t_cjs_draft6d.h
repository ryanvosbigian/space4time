// Generated by rstantools.  Do not edit by hand.

/*
    space4time is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    space4time is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with space4time.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_s4t_cjs_draft6d_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 703> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 145, column 2 to column 39)",
  " (in 'string', line 146, column 2 to column 35)",
  " (in 'string', line 147, column 2 to column 39)",
  " (in 'string', line 148, column 2 to column 31)",
  " (in 'string', line 398, column 2 to column 38)",
  " (in 'string', line 399, column 2 to column 36)",
  " (in 'string', line 400, column 2 to column 44)",
  " (in 'string', line 404, column 4 to column 103)",
  " (in 'string', line 403, column 29 to line 405, column 3)",
  " (in 'string', line 403, column 2 to line 405, column 3)",
  " (in 'string', line 406, column 8 to column 16)",
  " (in 'string', line 406, column 17 to column 27)",
  " (in 'string', line 406, column 28 to column 33)",
  " (in 'string', line 407, column 7 to column 16)",
  " (in 'string', line 407, column 17 to column 30)",
  " (in 'string', line 407, column 39 to column 52)",
  " (in 'string', line 406, column 2 to line 407, column 60)",
  " (in 'string', line 408, column 11 to column 19)",
  " (in 'string', line 408, column 20 to column 30)",
  " (in 'string', line 408, column 31 to column 36)",
  " (in 'string', line 409, column 7 to column 16)",
  " (in 'string', line 409, column 17 to column 30)",
  " (in 'string', line 409, column 39 to column 52)",
  " (in 'string', line 408, column 5 to line 409, column 64)",
  " (in 'string', line 410, column 4 to column 24)",
  " (in 'string', line 411, column 10 to column 18)",
  " (in 'string', line 411, column 19 to column 29)",
  " (in 'string', line 412, column 10 to column 15)",
  " (in 'string', line 412, column 16 to column 25)",
  " (in 'string', line 412, column 27 to column 40)",
  " (in 'string', line 412, column 49 to column 66)",
  " (in 'string', line 411, column 4 to line 412, column 74)",
  " (in 'string', line 413, column 2 to column 22)",
  " (in 'string', line 414, column 9 to column 26)",
  " (in 'string', line 414, column 2 to column 77)",
  " (in 'string', line 416, column 4 to column 32)",
  " (in 'string', line 417, column 4 to column 32)",
  " (in 'string', line 418, column 4 to column 31)",
  " (in 'string', line 419, column 4 to column 31)",
  " (in 'string', line 421, column 4 to column 31)",
  " (in 'string', line 422, column 4 to column 31)",
  " (in 'string', line 423, column 4 to column 59)",
  " (in 'string', line 415, column 33 to line 424, column 3)",
  " (in 'string', line 415, column 2 to line 424, column 3)",
  " (in 'string', line 426, column 4 to line 449, column 4)",
  " (in 'string', line 427, column 6 to column 27)",
  " (in 'string', line 431, column 20 to column 57)",
  " (in 'string', line 431, column 10 to line 446, column 9)",
  " (in 'string', line 432, column 12 to column 54)",
  " (in 'string', line 436, column 19 to column 23)",
  " (in 'string', line 436, column 12 to column 55)",
  " (in 'string', line 437, column 19 to column 23)",
  " (in 'string', line 437, column 12 to column 64)",
  " (in 'string', line 438, column 19 to column 23)",
  " (in 'string', line 438, column 12 to column 60)",
  " (in 'string', line 440, column 12 to column 76)",
  " (in 'string', line 433, column 40 to line 441, column 11)",
  " (in 'string', line 433, column 12 to line 441, column 11)",
  " (in 'string', line 442, column 17 to column 30)",
  " (in 'string', line 442, column 10 to column 71)",
  " (in 'string', line 443, column 17 to column 30)",
  " (in 'string', line 443, column 10 to column 80)",
  " (in 'string', line 444, column 17 to column 30)",
  " (in 'string', line 444, column 10 to column 67)",
  " (in 'string', line 445, column 10 to column 68)",
  " (in 'string', line 430, column 35 to line 447, column 7)",
  " (in 'string', line 430, column 8 to line 447, column 7)",
  " (in 'string', line 429, column 32 to line 448, column 5)",
  " (in 'string', line 429, column 6 to line 448, column 5)",
  " (in 'string', line 425, column 24 to line 450, column 3)",
  " (in 'string', line 425, column 2 to line 450, column 3)",
  " (in 'string', line 472, column 4 to column 38)",
  " (in 'string', line 473, column 4 to column 38)",
  " (in 'string', line 474, column 4 to column 39)",
  " (in 'string', line 475, column 4 to column 38)",
  " (in 'string', line 476, column 4 to column 38)",
  " (in 'string', line 477, column 4 to column 38)",
  " (in 'string', line 478, column 4 to column 61)",
  " (in 'string', line 471, column 32 to line 479, column 3)",
  " (in 'string', line 471, column 2 to line 479, column 3)",
  " (in 'string', line 481, column 4 to column 38)",
  " (in 'string', line 482, column 4 to column 38)",
  " (in 'string', line 483, column 4 to column 37)",
  " (in 'string', line 485, column 4 to column 37)",
  " (in 'string', line 486, column 4 to column 37)",
  " (in 'string', line 487, column 4 to column 37)",
  " (in 'string', line 488, column 4 to column 37)",
  " (in 'string', line 489, column 4 to column 42)",
  " (in 'string', line 480, column 31 to line 490, column 3)",
  " (in 'string', line 480, column 2 to line 490, column 3)",
  " (in 'string', line 491, column 8 to column 16)",
  " (in 'string', line 491, column 17 to column 27)",
  " (in 'string', line 491, column 28 to column 37)",
  " (in 'string', line 491, column 38 to column 43)",
  " (in 'string', line 492, column 13 to column 26)",
  " (in 'string', line 492, column 27 to column 40)",
  " (in 'string', line 491, column 2 to line 492, column 48)",
  " (in 'string', line 493, column 2 to column 22)",
  " (in 'string', line 494, column 9 to column 22)",
  " (in 'string', line 494, column 2 to column 76)",
  " (in 'string', line 496, column 4 to column 32)",
  " (in 'string', line 497, column 4 to column 32)",
  " (in 'string', line 498, column 4 to column 31)",
  " (in 'string', line 499, column 4 to column 31)",
  " (in 'string', line 500, column 4 to column 31)",
  " (in 'string', line 501, column 4 to column 31)",
  " (in 'string', line 502, column 4 to column 47)",
  " (in 'string', line 495, column 29 to line 503, column 3)",
  " (in 'string', line 495, column 2 to line 503, column 3)",
  " (in 'string', line 505, column 4 to line 522, column 5)",
  " (in 'string', line 506, column 6 to column 27)",
  " (in 'string', line 509, column 20 to column 57)",
  " (in 'string', line 509, column 10 to line 519, column 11)",
  " (in 'string', line 510, column 12 to column 54)",
  " (in 'string', line 512, column 21 to column 25)",
  " (in 'string', line 512, column 14 to column 57)",
  " (in 'string', line 513, column 21 to column 25)",
  " (in 'string', line 513, column 14 to column 79)",
  " (in 'string', line 514, column 14 to column 78)",
  " (in 'string', line 511, column 40 to line 515, column 13)",
  " (in 'string', line 511, column 12 to line 515, column 13)",
  " (in 'string', line 516, column 19 to column 32)",
  " (in 'string', line 516, column 12 to column 73)",
  " (in 'string', line 517, column 19 to column 32)",
  " (in 'string', line 517, column 12 to column 95)",
  " (in 'string', line 518, column 12 to column 70)",
  " (in 'string', line 508, column 35 to line 520, column 9)",
  " (in 'string', line 508, column 8 to line 520, column 9)",
  " (in 'string', line 507, column 32 to line 521, column 7)",
  " (in 'string', line 507, column 6 to line 521, column 7)",
  " (in 'string', line 504, column 24 to line 523, column 3)",
  " (in 'string', line 504, column 2 to line 523, column 3)",
  " (in 'string', line 525, column 8 to column 16)",
  " (in 'string', line 525, column 17 to column 27)",
  " (in 'string', line 525, column 28 to column 38)",
  " (in 'string', line 526, column 8 to column 13)",
  " (in 'string', line 526, column 14 to column 23)",
  " (in 'string', line 526, column 32 to column 37)",
  " (in 'string', line 526, column 38 to column 51)",
  " (in 'string', line 525, column 2 to line 526, column 66)",
  " (in 'string', line 527, column 2 to column 36)",
  " (in 'string', line 529, column 4 to line 544, column 5)",
  " (in 'string', line 530, column 6 to column 27)",
  " (in 'string', line 532, column 18 to column 55)",
  " (in 'string', line 532, column 8 to line 542, column 9)",
  " (in 'string', line 535, column 12 to column 79)",
  " (in 'string', line 536, column 12 to column 44)",
  " (in 'string', line 538, column 14 to column 34)",
  " (in 'string', line 539, column 14 to column 66)",
  " (in 'string', line 537, column 35 to line 540, column 13)",
  " (in 'string', line 537, column 12 to line 540, column 13)",
  " (in 'string', line 534, column 37 to line 541, column 11)",
  " (in 'string', line 534, column 10 to line 541, column 11)",
  " (in 'string', line 531, column 32 to line 543, column 7)",
  " (in 'string', line 531, column 6 to line 543, column 7)",
  " (in 'string', line 528, column 24 to line 545, column 3)",
  " (in 'string', line 528, column 2 to line 545, column 3)",
  " (in 'string', line 547, column 14 to column 56)",
  " (in 'string', line 547, column 4 to line 572, column 5)",
  " (in 'string', line 548, column 12 to column 28)",
  " (in 'string', line 548, column 6 to column 75)",
  " (in 'string', line 550, column 8 to column 28)",
  " (in 'string', line 551, column 8 to column 36)",
  " (in 'string', line 552, column 18 to column 55)",
  " (in 'string', line 552, column 8 to line 570, column 9)",
  " (in 'string', line 555, column 14 to column 78)",
  " (in 'string', line 556, column 14 to column 43)",
  " (in 'string', line 558, column 16 to column 36)",
  " (in 'string', line 559, column 16 to column 67)",
  " (in 'string', line 560, column 16 to column 49)",
  " (in 'string', line 561, column 23 to column 32)",
  " (in 'string', line 561, column 16 to column 95)",
  " (in 'string', line 562, column 23 to column 40)",
  " (in 'string', line 562, column 41 to column 50)",
  " (in 'string', line 562, column 16 to column 116)",
  " (in 'string', line 563, column 23 to column 40)",
  " (in 'string', line 563, column 41 to column 50)",
  " (in 'string', line 563, column 16 to column 115)",
  " (in 'string', line 564, column 16 to line 565, column 72)",
  " (in 'string', line 566, column 16 to column 59)",
  " (in 'string', line 557, column 41 to line 567, column 15)",
  " (in 'string', line 557, column 14 to line 567, column 15)",
  " (in 'string', line 554, column 39 to line 568, column 13)",
  " (in 'string', line 554, column 12 to line 568, column 13)",
  " (in 'string', line 553, column 36 to line 569, column 11)",
  " (in 'string', line 553, column 10 to line 569, column 11)",
  " (in 'string', line 549, column 38 to line 571, column 7)",
  " (in 'string', line 549, column 6 to line 571, column 7)",
  " (in 'string', line 546, column 24 to line 573, column 3)",
  " (in 'string', line 546, column 2 to line 573, column 3)",
  " (in 'string', line 574, column 8 to column 16)",
  " (in 'string', line 574, column 17 to column 27)",
  " (in 'string', line 574, column 28 to column 37)",
  " (in 'string', line 574, column 46 to column 51)",
  " (in 'string', line 574, column 52 to column 65)",
  " (in 'string', line 574, column 2 to column 77)",
  " (in 'string', line 575, column 2 to column 30)",
  " (in 'string', line 577, column 4 to line 594, column 5)",
  " (in 'string', line 578, column 6 to column 27)",
  " (in 'string', line 580, column 18 to column 55)",
  " (in 'string', line 580, column 8 to line 592, column 9)",
  " (in 'string', line 583, column 12 to column 75)",
  " (in 'string', line 584, column 12 to column 40)",
  " (in 'string', line 585, column 12 to column 70)",
  " (in 'string', line 586, column 12 to column 43)",
  " (in 'string', line 587, column 19 to column 38)",
  " (in 'string', line 587, column 12 to column 82)",
  " (in 'string', line 588, column 19 to column 38)",
  " (in 'string', line 588, column 39 to column 56)",
  " (in 'string', line 588, column 12 to column 123)",
  " (in 'string', line 589, column 19 to column 38)",
  " (in 'string', line 589, column 39 to column 56)",
  " (in 'string', line 589, column 12 to column 113)",
  " (in 'string', line 590, column 12 to column 133)",
  " (in 'string', line 582, column 38 to line 591, column 11)",
  " (in 'string', line 582, column 11 to line 591, column 11)",
  " (in 'string', line 579, column 32 to line 593, column 7)",
  " (in 'string', line 579, column 6 to line 593, column 7)",
  " (in 'string', line 576, column 24 to line 595, column 3)",
  " (in 'string', line 576, column 2 to line 595, column 3)",
  " (in 'string', line 596, column 8 to column 25)",
  " (in 'string', line 596, column 26 to column 53)",
  " (in 'string', line 596, column 1 to line 599, column 102)",
  " (in 'string', line 600, column 8 to column 25)",
  " (in 'string', line 600, column 26 to column 53)",
  " (in 'string', line 600, column 1 to line 603, column 102)",
  " (in 'string', line 604, column 2 to line 609, column 3)",
  " (in 'string', line 605, column 4 to column 49)",
  " (in 'string', line 606, column 4 to column 44)",
  " (in 'string', line 607, column 5 to column 128)",
  " (in 'string', line 611, column 2 to line 624, column 3)",
  " (in 'string', line 612, column 4 to column 49)",
  " (in 'string', line 614, column 11 to column 35)",
  " (in 'string', line 614, column 4 to column 87)",
  " (in 'string', line 615, column 11 to column 24)",
  " (in 'string', line 615, column 4 to column 98)",
  " (in 'string', line 619, column 15 to column 28)",
  " (in 'string', line 619, column 4 to column 120)",
  " (in 'string', line 621, column 4 to column 43)",
  " (in 'string', line 623, column 4 to column 59)",
  " (in 'string', line 628, column 2 to line 666, column 3)",
  " (in 'string', line 631, column 4 to column 51)",
  " (in 'string', line 632, column 4 to column 53)",
  " (in 'string', line 635, column 4 to column 26)",
  " (in 'string', line 636, column 4 to column 26)",
  " (in 'string', line 637, column 4 to column 26)",
  " (in 'string', line 648, column 4 to column 44)",
  " (in 'string', line 649, column 4 to column 121)",
  " (in 'string', line 654, column 4 to line 655, column 110)",
  " (in 'string', line 658, column 4 to column 65)",
  " (in 'string', line 668, column 1 to line 695, column 2)",
  " (in 'string', line 669, column 4 to column 51)",
  " (in 'string', line 670, column 4 to column 53)",
  " (in 'string', line 671, column 4 to column 26)",
  " (in 'string', line 672, column 4 to column 26)",
  " (in 'string', line 673, column 4 to column 26)",
  " (in 'string', line 674, column 4 to column 25)",
  " (in 'string', line 675, column 11 to column 33)",
  " (in 'string', line 675, column 4 to line 676, column 126)",
  " (in 'string', line 677, column 11 to column 24)",
  " (in 'string', line 677, column 4 to line 678, column 40)",
  " (in 'string', line 679, column 11 to column 35)",
  " (in 'string', line 679, column 4 to column 87)",
  " (in 'string', line 680, column 11 to column 24)",
  " (in 'string', line 680, column 4 to column 97)",
  " (in 'string', line 685, column 15 to column 28)",
  " (in 'string', line 685, column 4 to line 686, column 115)",
  " (in 'string', line 687, column 4 to column 43)",
  " (in 'string', line 688, column 4 to column 65)",
  " (in 'string', line 401, column 2 to line 696, column 3)",
  " (in 'string', line 154, column 3 to column 31)",
  " (in 'string', line 153, column 27 to line 155, column 3)",
  " (in 'string', line 153, column 2 to line 155, column 3)",
  " (in 'string', line 157, column 3 to column 27)",
  " (in 'string', line 156, column 23 to line 158, column 3)",
  " (in 'string', line 156, column 2 to line 158, column 3)",
  " (in 'string', line 160, column 2 to column 91)",
  " (in 'string', line 162, column 8 to column 16)",
  " (in 'string', line 162, column 17 to column 27)",
  " (in 'string', line 162, column 28 to column 33)",
  " (in 'string', line 163, column 7 to column 16)",
  " (in 'string', line 163, column 17 to column 30)",
  " (in 'string', line 163, column 39 to column 52)",
  " (in 'string', line 162, column 2 to line 163, column 60)",
  " (in 'string', line 164, column 9 to column 17)",
  " (in 'string', line 164, column 18 to column 28)",
  " (in 'string', line 164, column 29 to column 34)",
  " (in 'string', line 165, column 7 to column 16)",
  " (in 'string', line 165, column 17 to column 30)",
  " (in 'string', line 165, column 39 to column 52)",
  " (in 'string', line 164, column 3 to line 165, column 64)",
  " (in 'string', line 166, column 4 to column 24)",
  " (in 'string', line 167, column 10 to column 18)",
  " (in 'string', line 167, column 19 to column 29)",
  " (in 'string', line 168, column 10 to column 15)",
  " (in 'string', line 168, column 16 to column 25)",
  " (in 'string', line 168, column 27 to column 40)",
  " (in 'string', line 168, column 49 to column 66)",
  " (in 'string', line 167, column 4 to line 168, column 74)",
  " (in 'string', line 169, column 2 to column 22)",
  " (in 'string', line 171, column 8 to column 16)",
  " (in 'string', line 171, column 17 to column 27)",
  " (in 'string', line 171, column 28 to column 37)",
  " (in 'string', line 171, column 38 to column 43)",
  " (in 'string', line 172, column 13 to column 26)",
  " (in 'string', line 172, column 27 to column 40)",
  " (in 'string', line 171, column 2 to line 172, column 48)",
  " (in 'string', line 173, column 2 to column 22)",
  " (in 'string', line 174, column 9 to column 26)",
  " (in 'string', line 174, column 2 to column 88)",
  " (in 'string', line 176, column 4 to column 32)",
  " (in 'string', line 177, column 4 to column 32)",
  " (in 'string', line 178, column 4 to column 31)",
  " (in 'string', line 179, column 4 to column 31)",
  " (in 'string', line 181, column 4 to column 31)",
  " (in 'string', line 182, column 4 to column 31)",
  " (in 'string', line 184, column 4 to column 47)",
  " (in 'string', line 175, column 33 to line 185, column 3)",
  " (in 'string', line 175, column 2 to line 185, column 3)",
  " (in 'string', line 186, column 9 to column 22)",
  " (in 'string', line 186, column 2 to column 76)",
  " (in 'string', line 188, column 4 to column 32)",
  " (in 'string', line 189, column 4 to column 32)",
  " (in 'string', line 190, column 4 to column 31)",
  " (in 'string', line 191, column 4 to column 31)",
  " (in 'string', line 192, column 4 to column 31)",
  " (in 'string', line 193, column 4 to column 31)",
  " (in 'string', line 194, column 4 to column 47)",
  " (in 'string', line 187, column 29 to line 195, column 3)",
  " (in 'string', line 187, column 2 to line 195, column 3)",
  " (in 'string', line 197, column 4 to line 214, column 5)",
  " (in 'string', line 198, column 6 to column 27)",
  " (in 'string', line 201, column 20 to column 57)",
  " (in 'string', line 201, column 10 to line 211, column 11)",
  " (in 'string', line 202, column 12 to column 54)",
  " (in 'string', line 204, column 21 to column 25)",
  " (in 'string', line 204, column 14 to column 57)",
  " (in 'string', line 205, column 21 to column 25)",
  " (in 'string', line 205, column 14 to column 79)",
  " (in 'string', line 206, column 14 to column 78)",
  " (in 'string', line 203, column 40 to line 207, column 13)",
  " (in 'string', line 203, column 12 to line 207, column 13)",
  " (in 'string', line 208, column 19 to column 32)",
  " (in 'string', line 208, column 12 to column 73)",
  " (in 'string', line 209, column 19 to column 32)",
  " (in 'string', line 209, column 12 to column 95)",
  " (in 'string', line 210, column 12 to column 70)",
  " (in 'string', line 200, column 35 to line 212, column 9)",
  " (in 'string', line 200, column 8 to line 212, column 9)",
  " (in 'string', line 199, column 32 to line 213, column 7)",
  " (in 'string', line 199, column 6 to line 213, column 7)",
  " (in 'string', line 196, column 24 to line 215, column 3)",
  " (in 'string', line 196, column 2 to line 215, column 3)",
  " (in 'string', line 217, column 8 to column 16)",
  " (in 'string', line 217, column 17 to column 27)",
  " (in 'string', line 217, column 28 to column 38)",
  " (in 'string', line 218, column 8 to column 13)",
  " (in 'string', line 218, column 14 to column 23)",
  " (in 'string', line 218, column 32 to column 37)",
  " (in 'string', line 218, column 38 to column 51)",
  " (in 'string', line 217, column 2 to line 218, column 66)",
  " (in 'string', line 219, column 2 to column 36)",
  " (in 'string', line 221, column 4 to line 236, column 5)",
  " (in 'string', line 222, column 6 to column 27)",
  " (in 'string', line 224, column 18 to column 55)",
  " (in 'string', line 224, column 8 to line 234, column 9)",
  " (in 'string', line 227, column 12 to column 79)",
  " (in 'string', line 228, column 12 to column 44)",
  " (in 'string', line 230, column 14 to column 34)",
  " (in 'string', line 231, column 14 to column 66)",
  " (in 'string', line 229, column 35 to line 232, column 13)",
  " (in 'string', line 229, column 12 to line 232, column 13)",
  " (in 'string', line 226, column 37 to line 233, column 11)",
  " (in 'string', line 226, column 10 to line 233, column 11)",
  " (in 'string', line 223, column 32 to line 235, column 7)",
  " (in 'string', line 223, column 6 to line 235, column 7)",
  " (in 'string', line 220, column 24 to line 237, column 3)",
  " (in 'string', line 220, column 2 to line 237, column 3)",
  " (in 'string', line 239, column 14 to column 56)",
  " (in 'string', line 239, column 4 to line 264, column 5)",
  " (in 'string', line 240, column 12 to column 28)",
  " (in 'string', line 240, column 6 to column 75)",
  " (in 'string', line 242, column 8 to column 28)",
  " (in 'string', line 243, column 8 to column 36)",
  " (in 'string', line 244, column 18 to column 55)",
  " (in 'string', line 244, column 8 to line 262, column 9)",
  " (in 'string', line 247, column 14 to column 78)",
  " (in 'string', line 248, column 14 to column 43)",
  " (in 'string', line 250, column 16 to column 36)",
  " (in 'string', line 251, column 16 to column 67)",
  " (in 'string', line 252, column 16 to column 49)",
  " (in 'string', line 253, column 23 to column 32)",
  " (in 'string', line 253, column 16 to column 95)",
  " (in 'string', line 254, column 23 to column 40)",
  " (in 'string', line 254, column 41 to column 50)",
  " (in 'string', line 254, column 16 to column 116)",
  " (in 'string', line 255, column 23 to column 40)",
  " (in 'string', line 255, column 41 to column 50)",
  " (in 'string', line 255, column 16 to column 115)",
  " (in 'string', line 256, column 16 to line 257, column 72)",
  " (in 'string', line 258, column 16 to column 59)",
  " (in 'string', line 249, column 41 to line 259, column 15)",
  " (in 'string', line 249, column 14 to line 259, column 15)",
  " (in 'string', line 246, column 39 to line 260, column 13)",
  " (in 'string', line 246, column 12 to line 260, column 13)",
  " (in 'string', line 245, column 36 to line 261, column 11)",
  " (in 'string', line 245, column 10 to line 261, column 11)",
  " (in 'string', line 241, column 38 to line 263, column 7)",
  " (in 'string', line 241, column 6 to line 263, column 7)",
  " (in 'string', line 238, column 24 to line 265, column 3)",
  " (in 'string', line 238, column 2 to line 265, column 3)",
  " (in 'string', line 266, column 8 to column 16)",
  " (in 'string', line 266, column 17 to column 27)",
  " (in 'string', line 266, column 28 to column 37)",
  " (in 'string', line 266, column 46 to column 51)",
  " (in 'string', line 266, column 52 to column 65)",
  " (in 'string', line 266, column 2 to column 77)",
  " (in 'string', line 267, column 2 to column 30)",
  " (in 'string', line 269, column 4 to line 286, column 5)",
  " (in 'string', line 270, column 6 to column 27)",
  " (in 'string', line 272, column 18 to column 55)",
  " (in 'string', line 272, column 8 to line 284, column 9)",
  " (in 'string', line 275, column 12 to column 75)",
  " (in 'string', line 276, column 12 to column 40)",
  " (in 'string', line 277, column 12 to column 70)",
  " (in 'string', line 278, column 12 to column 43)",
  " (in 'string', line 279, column 19 to column 38)",
  " (in 'string', line 279, column 12 to column 82)",
  " (in 'string', line 280, column 19 to column 38)",
  " (in 'string', line 280, column 39 to column 56)",
  " (in 'string', line 280, column 12 to column 123)",
  " (in 'string', line 281, column 19 to column 38)",
  " (in 'string', line 281, column 39 to column 56)",
  " (in 'string', line 281, column 12 to column 113)",
  " (in 'string', line 282, column 12 to column 133)",
  " (in 'string', line 274, column 38 to line 283, column 11)",
  " (in 'string', line 274, column 11 to line 283, column 11)",
  " (in 'string', line 271, column 32 to line 285, column 7)",
  " (in 'string', line 271, column 6 to line 285, column 7)",
  " (in 'string', line 268, column 24 to line 287, column 3)",
  " (in 'string', line 268, column 2 to line 287, column 3)",
  " (in 'string', line 288, column 8 to column 25)",
  " (in 'string', line 288, column 26 to column 53)",
  " (in 'string', line 288, column 1 to line 291, column 102)",
  " (in 'string', line 292, column 8 to column 25)",
  " (in 'string', line 292, column 26 to column 53)",
  " (in 'string', line 292, column 1 to line 295, column 102)",
  " (in 'string', line 299, column 9 to column 12)",
  " (in 'string', line 299, column 2 to column 24)",
  " (in 'string', line 300, column 2 to line 305, column 3)",
  " (in 'string', line 301, column 4 to column 49)",
  " (in 'string', line 302, column 4 to column 44)",
  " (in 'string', line 303, column 5 to column 114)",
  " (in 'string', line 307, column 2 to line 320, column 3)",
  " (in 'string', line 308, column 4 to column 49)",
  " (in 'string', line 310, column 11 to column 35)",
  " (in 'string', line 310, column 4 to column 87)",
  " (in 'string', line 311, column 11 to column 24)",
  " (in 'string', line 311, column 4 to column 98)",
  " (in 'string', line 315, column 15 to column 28)",
  " (in 'string', line 315, column 4 to column 120)",
  " (in 'string', line 317, column 4 to column 43)",
  " (in 'string', line 319, column 4 to column 45)",
  " (in 'string', line 321, column 2 to column 27)",
  " (in 'string', line 325, column 9 to column 12)",
  " (in 'string', line 325, column 2 to column 24)",
  " (in 'string', line 326, column 2 to line 364, column 3)",
  " (in 'string', line 329, column 4 to column 51)",
  " (in 'string', line 330, column 4 to column 53)",
  " (in 'string', line 333, column 4 to column 26)",
  " (in 'string', line 334, column 4 to column 26)",
  " (in 'string', line 335, column 4 to column 26)",
  " (in 'string', line 346, column 4 to column 44)",
  " (in 'string', line 347, column 4 to column 121)",
  " (in 'string', line 352, column 4 to line 353, column 110)",
  " (in 'string', line 356, column 4 to column 45)",
  " (in 'string', line 366, column 1 to line 393, column 2)",
  " (in 'string', line 367, column 4 to column 51)",
  " (in 'string', line 368, column 4 to column 53)",
  " (in 'string', line 369, column 4 to column 26)",
  " (in 'string', line 370, column 4 to column 26)",
  " (in 'string', line 371, column 4 to column 26)",
  " (in 'string', line 372, column 4 to column 25)",
  " (in 'string', line 373, column 11 to column 33)",
  " (in 'string', line 373, column 4 to line 374, column 126)",
  " (in 'string', line 375, column 11 to column 24)",
  " (in 'string', line 375, column 4 to line 376, column 40)",
  " (in 'string', line 377, column 11 to column 35)",
  " (in 'string', line 377, column 4 to column 87)",
  " (in 'string', line 378, column 11 to column 24)",
  " (in 'string', line 378, column 4 to column 97)",
  " (in 'string', line 383, column 15 to column 28)",
  " (in 'string', line 383, column 4 to line 384, column 115)",
  " (in 'string', line 385, column 4 to column 43)",
  " (in 'string', line 386, column 4 to column 45)",
  " (in 'string', line 394, column 1 to column 26)",
  " (in 'string', line 49, column 2 to column 19)",
  " (in 'string', line 50, column 2 to column 19)",
  " (in 'string', line 51, column 2 to column 19)",
  " (in 'string', line 52, column 2 to column 19)",
  " (in 'string', line 53, column 2 to column 21)",
  " (in 'string', line 54, column 2 to column 26)",
  " (in 'string', line 55, column 2 to column 28)",
  " (in 'string', line 56, column 2 to column 28)",
  " (in 'string', line 57, column 2 to column 29)",
  " (in 'string', line 58, column 2 to column 25)",
  " (in 'string', line 59, column 2 to column 29)",
  " (in 'string', line 60, column 2 to column 28)",
  " (in 'string', line 62, column 2 to column 32)",
  " (in 'string', line 63, column 2 to column 25)",
  " (in 'string', line 64, column 2 to column 25)",
  " (in 'string', line 65, column 2 to column 21)",
  " (in 'string', line 66, column 2 to column 21)",
  " (in 'string', line 67, column 2 to column 33)",
  " (in 'string', line 68, column 2 to column 33)",
  " (in 'string', line 69, column 2 to column 27)",
  " (in 'string', line 70, column 2 to column 29)",
  " (in 'string', line 71, column 2 to column 29)",
  " (in 'string', line 72, column 2 to column 23)",
  " (in 'string', line 73, column 2 to column 23)",
  " (in 'string', line 74, column 2 to column 26)",
  " (in 'string', line 75, column 2 to column 27)",
  " (in 'string', line 76, column 2 to column 21)",
  " (in 'string', line 77, column 2 to column 20)",
  " (in 'string', line 78, column 2 to column 15)",
  " (in 'string', line 79, column 2 to column 23)",
  " (in 'string', line 80, column 2 to column 23)",
  " (in 'string', line 81, column 2 to column 22)",
  " (in 'string', line 82, column 2 to column 22)",
  " (in 'string', line 83, column 8 to column 18)",
  " (in 'string', line 83, column 2 to column 34)",
  " (in 'string', line 84, column 8 to column 18)",
  " (in 'string', line 84, column 2 to column 34)",
  " (in 'string', line 85, column 8 to column 11)",
  " (in 'string', line 85, column 2 to column 27)",
  " (in 'string', line 86, column 8 to column 18)",
  " (in 'string', line 86, column 2 to column 36)",
  " (in 'string', line 87, column 8 to column 11)",
  " (in 'string', line 87, column 2 to column 27)",
  " (in 'string', line 88, column 8 to column 20)",
  " (in 'string', line 88, column 2 to column 37)",
  " (in 'string', line 89, column 8 to column 20)",
  " (in 'string', line 89, column 2 to column 37)",
  " (in 'string', line 90, column 8 to column 21)",
  " (in 'string', line 90, column 2 to column 39)",
  " (in 'string', line 91, column 8 to column 20)",
  " (in 'string', line 91, column 2 to column 39)",
  " (in 'string', line 93, column 8 to column 24)",
  " (in 'string', line 93, column 2 to column 45)",
  " (in 'string', line 94, column 8 to column 27)",
  " (in 'string', line 94, column 2 to column 53)",
  " (in 'string', line 95, column 8 to column 28)",
  " (in 'string', line 95, column 2 to column 53)",
  " (in 'string', line 96, column 8 to column 18)",
  " (in 'string', line 96, column 2 to column 41)",
  " (in 'string', line 97, column 8 to column 18)",
  " (in 'string', line 97, column 2 to column 38)",
  " (in 'string', line 98, column 8 to column 11)",
  " (in 'string', line 98, column 2 to column 29)",
  " (in 'string', line 99, column 8 to column 11)",
  " (in 'string', line 99, column 2 to column 29)",
  " (in 'string', line 100, column 9 to column 18)",
  " (in 'string', line 100, column 19 to column 28)",
  " (in 'string', line 100, column 2 to column 44)",
  " (in 'string', line 101, column 9 to column 14)",
  " (in 'string', line 101, column 15 to column 20)",
  " (in 'string', line 101, column 2 to column 32)",
  " (in 'string', line 102, column 8 to column 25)",
  " (in 'string', line 102, column 27 to column 44)",
  " (in 'string', line 102, column 2 to column 64)",
  " (in 'string', line 103, column 8 to column 21)",
  " (in 'string', line 103, column 23 to column 36)",
  " (in 'string', line 103, column 2 to column 56)",
  " (in 'string', line 104, column 8 to column 24)",
  " (in 'string', line 104, column 26 to column 42)",
  " (in 'string', line 104, column 2 to column 69)",
  " (in 'string', line 105, column 8 to column 23)",
  " (in 'string', line 105, column 25 to column 40)",
  " (in 'string', line 105, column 2 to column 66)",
  " (in 'string', line 106, column 8 to column 18)",
  " (in 'string', line 106, column 19 to column 40)",
  " (in 'string', line 106, column 2 to column 59)",
  " (in 'string', line 107, column 8 to column 18)",
  " (in 'string', line 107, column 20 to column 38)",
  " (in 'string', line 107, column 2 to column 54)",
  " (in 'string', line 109, column 2 to column 27)",
  " (in 'string', line 110, column 2 to column 27)",
  " (in 'string', line 111, column 2 to column 27)",
  " (in 'string', line 112, column 2 to column 29)",
  " (in 'string', line 113, column 8 to column 21)",
  " (in 'string', line 113, column 2 to column 39)",
  " (in 'string', line 114, column 9 to column 20)",
  " (in 'string', line 114, column 22 to column 35)",
  " (in 'string', line 114, column 2 to column 52)",
  " (in 'string', line 115, column 2 to column 20)",
  " (in 'string', line 116, column 2 to column 20)",
  " (in 'string', line 117, column 2 to column 20)",
  " (in 'string', line 118, column 2 to column 20)",
  " (in 'string', line 119, column 2 to column 22)",
  " (in 'string', line 120, column 2 to column 22)",
  " (in 'string', line 121, column 9 to column 22)",
  " (in 'string', line 121, column 24 to column 39)",
  " (in 'string', line 121, column 2 to column 53)",
  " (in 'string', line 122, column 9 to column 22)",
  " (in 'string', line 122, column 24 to column 39)",
  " (in 'string', line 122, column 2 to column 53)",
  " (in 'string', line 123, column 8 to column 23)",
  " (in 'string', line 123, column 2 to column 43)",
  " (in 'string', line 124, column 8 to column 23)",
  " (in 'string', line 124, column 2 to column 43)",
  " (in 'string', line 125, column 9 to column 22)",
  " (in 'string', line 125, column 23 to column 36)",
  " (in 'string', line 125, column 2 to column 55)",
  " (in 'string', line 126, column 9 to column 22)",
  " (in 'string', line 126, column 23 to column 36)",
  " (in 'string', line 126, column 2 to column 55)",
  " (in 'string', line 127, column 2 to column 21)",
  " (in 'string', line 128, column 2 to column 21)",
  " (in 'string', line 129, column 8 to column 22)",
  " (in 'string', line 129, column 2 to column 41)",
  " (in 'string', line 130, column 8 to column 22)",
  " (in 'string', line 130, column 2 to column 41)",
  " (in 'string', line 132, column 7 to column 15)",
  " (in 'string', line 132, column 16 to column 26)",
  " (in 'string', line 132, column 27 to column 32)",
  " (in 'string', line 133, column 7 to column 16)",
  " (in 'string', line 133, column 17 to column 30)",
  " (in 'string', line 133, column 39 to column 52)",
  " (in 'string', line 132, column 1 to line 133, column 66)",
  " (in 'string', line 134, column 8 to column 16)",
  " (in 'string', line 134, column 17 to column 27)",
  " (in 'string', line 134, column 28 to column 37)",
  " (in 'string', line 134, column 46 to column 51)",
  " (in 'string', line 134, column 52 to column 65)",
  " (in 'string', line 134, column 2 to column 83)",
  " (in 'string', line 135, column 7 to column 15)",
  " (in 'string', line 135, column 16 to column 26)",
  " (in 'string', line 135, column 27 to column 32)",
  " (in 'string', line 136, column 7 to column 16)",
  " (in 'string', line 136, column 17 to column 30)",
  " (in 'string', line 136, column 39 to column 54)",
  " (in 'string', line 135, column 1 to line 136, column 68)",
  " (in 'string', line 137, column 8 to column 16)",
  " (in 'string', line 137, column 17 to column 27)",
  " (in 'string', line 137, column 28 to column 37)",
  " (in 'string', line 137, column 38 to column 43)",
  " (in 'string', line 138, column 13 to column 26)",
  " (in 'string', line 138, column 27 to column 40)",
  " (in 'string', line 137, column 2 to line 138, column 54)",
  " (in 'string', line 139, column 8 to column 16)",
  " (in 'string', line 139, column 17 to column 27)",
  " (in 'string', line 139, column 28 to column 38)",
  " (in 'string', line 140, column 8 to column 13)",
  " (in 'string', line 140, column 14 to column 23)",
  " (in 'string', line 140, column 32 to column 37)",
  " (in 'string', line 140, column 38 to column 51)",
  " (in 'string', line 139, column 2 to line 140, column 72)",
  " (in 'string', line 141, column 8 to column 18)",
  " (in 'string', line 141, column 20 to column 25)",
  " (in 'string', line 141, column 2 to column 48)",
  " (in 'string', line 142, column 8 to column 18)",
  " (in 'string', line 142, column 20 to column 25)",
  " (in 'string', line 142, column 2 to column 48)",
  " (in 'string', line 145, column 10 to column 25)",
  " (in 'string', line 146, column 9 to column 20)",
  " (in 'string', line 147, column 13 to column 24)",
  " (in 'string', line 148, column 13 to column 20)",
  " (in 'string', line 398, column 9 to column 23)",
  " (in 'string', line 399, column 9 to column 22)",
  " (in 'string', line 400, column 9 to column 34)",
  " (in 'string', line 5, column 4 to column 33)",
  " (in 'string', line 6, column 11 to column 19)",
  " (in 'string', line 6, column 4 to column 23)",
  " (in 'string', line 7, column 4 to column 20)",
  " (in 'string', line 8, column 4 to column 28)",
  " (in 'string', line 10, column 6 to column 59)",
  " (in 'string', line 11, column 6 to column 24)",
  " (in 'string', line 9, column 28 to line 12, column 5)",
  " (in 'string', line 9, column 4 to line 12, column 5)",
  " (in 'string', line 13, column 4 to column 13)",
  " (in 'string', line 4, column 42 to line 14, column 3)",
  " (in 'string', line 17, column 4 to column 45)",
  " (in 'string', line 19, column 11 to column 24)",
  " (in 'string', line 19, column 25 to column 38)",
  " (in 'string', line 19, column 4 to column 49)",
  " (in 'string', line 21, column 11 to column 24)",
  " (in 'string', line 21, column 4 to column 29)",
  " (in 'string', line 23, column 6 to column 63)",
  " (in 'string', line 22, column 31 to line 24, column 5)",
  " (in 'string', line 22, column 4 to line 24, column 5)",
  " (in 'string', line 27, column 4 to column 69)",
  " (in 'string', line 29, column 6 to column 104)",
  " (in 'string', line 28, column 28 to line 30, column 5)",
  " (in 'string', line 28, column 4 to line 30, column 5)",
  " (in 'string', line 32, column 4 to column 81)",
  " (in 'string', line 42, column 8 to column 45)",
  " (in 'string', line 39, column 46 to line 43, column 7)",
  " (in 'string', line 39, column 6 to line 43, column 7)",
  " (in 'string', line 38, column 38 to line 44, column 5)",
  " (in 'string', line 38, column 4 to line 44, column 5)",
  " (in 'string', line 45, column 4 to column 20)",
  " (in 'string', line 15, column 110 to line 46, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__>,-1,1>
concat_2d_array(const std::vector<std::vector<T0__>>& x, std::ostream*
                pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,-1>
predict_ordered_logistic(const T0__& alk_par_beta_arg__, const T1__&
                         alk_par_eta_arg__, const T2__& mod_mat_arg__,
                         const int& max_a_overall, std::ostream* pstream__);
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>,-1,1>
concat_2d_array(const std::vector<std::vector<T0__>>& x, std::ostream*
                pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int elements = std::numeric_limits<int>::min();
    current_statement__ = 671;
    elements = stan::math::prod(stan::math::dims(x));
    current_statement__ = 672;
    stan::math::validate_non_negative_index("y", "elements", elements);
    Eigen::Matrix<local_scalar_t__,-1,1> y =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(elements, DUMMY_VAR__);
    int counter = std::numeric_limits<int>::min();
    current_statement__ = 674;
    counter = 1;
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 675;
    n_rows = stan::model::rvalue(stan::math::dims(x), "dims(x)",
               stan::model::index_uni(1));
    current_statement__ = 679;
    for (int c = 1; c <=
         stan::model::rvalue(stan::math::dims(x), "dims(x)",
           stan::model::index_uni(2)); ++c) {
      current_statement__ = 676;
      stan::model::assign(y,
        stan::math::to_vector(
          stan::model::rvalue(x, "x", stan::model::index_omni(),
            stan::model::index_uni(c))), "assigning variable y",
        stan::model::index_min_max(counter, ((counter + n_rows) - 1)));
      current_statement__ = 677;
      counter = (counter + n_rows);
    }
    current_statement__ = 680;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,-1>
predict_ordered_logistic(const T0__& alk_par_beta_arg__, const T1__&
                         alk_par_eta_arg__, const T2__& mod_mat_arg__,
                         const int& max_a_overall, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& alk_par_beta = stan::math::to_ref(alk_par_beta_arg__);
  const auto& alk_par_eta = stan::math::to_ref(alk_par_eta_arg__);
  const auto& mod_mat = stan::math::to_ref(mod_mat_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int num_etas = std::numeric_limits<int>::min();
    current_statement__ = 682;
    num_etas = stan::math::num_elements(alk_par_eta);
    current_statement__ = 683;
    stan::math::validate_non_negative_index("pred_mat", "rows(mod_mat)",
      stan::math::rows(mod_mat));
    current_statement__ = 684;
    stan::math::validate_non_negative_index("pred_mat", "max_a_overall",
      max_a_overall);
    Eigen::Matrix<local_scalar_t__,-1,-1> pred_mat =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::rows(
                                                        mod_mat),
        max_a_overall, DUMMY_VAR__);
    current_statement__ = 686;
    stan::math::validate_non_negative_index("mu", "rows(mod_mat)",
      stan::math::rows(mod_mat));
    Eigen::Matrix<local_scalar_t__,-1,1> mu =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(mod_mat),
        DUMMY_VAR__);
    current_statement__ = 690;
    for (int i = 1; i <= stan::math::rows(mod_mat); ++i) {
      current_statement__ = 688;
      stan::model::assign(mu,
        stan::math::sum(
          stan::math::elt_multiply(
            stan::model::rvalue(mod_mat, "mod_mat",
              stan::model::index_uni(i),
              stan::model::index_min_max(1, stan::math::cols(mod_mat))),
            stan::math::transpose(alk_par_beta))), "assigning variable mu",
        stan::model::index_uni(i));
    }
    current_statement__ = 691;
    stan::model::assign(pred_mat,
      stan::math::subtract(1,
        stan::math::inv_logit(
          stan::math::subtract(mu,
            stan::model::rvalue(alk_par_eta, "alk_par_eta",
              stan::model::index_uni(1))))), "assigning variable pred_mat",
      stan::model::index_min_max(1, stan::math::rows(mod_mat)),
      stan::model::index_uni(1));
    current_statement__ = 694;
    for (int k = 2; k <= num_etas; ++k) {
      current_statement__ = 692;
      stan::model::assign(pred_mat,
        stan::math::subtract(
          stan::math::inv_logit(
            stan::math::subtract(mu,
              stan::model::rvalue(alk_par_eta, "alk_par_eta",
                stan::model::index_uni((k - 1))))),
          stan::math::inv_logit(
            stan::math::subtract(mu,
              stan::model::rvalue(alk_par_eta, "alk_par_eta",
                stan::model::index_uni(k))))), "assigning variable pred_mat",
        stan::model::index_min_max(1, stan::math::rows(mod_mat)),
        stan::model::index_uni(k));
    }
    current_statement__ = 695;
    stan::model::assign(pred_mat,
      stan::math::inv_logit(
        stan::math::subtract(mu,
          stan::model::rvalue(alk_par_eta, "alk_par_eta",
            stan::model::index_uni(num_etas)))),
      "assigning variable pred_mat",
      stan::model::index_min_max(1, stan::math::rows(mod_mat)),
      stan::model::index_uni((num_etas + 1)));
    current_statement__ = 700;
    if (stan::math::logical_gt(max_a_overall, (num_etas + 1))) {
      current_statement__ = 698;
      for (int i = (num_etas + 2); i <= max_a_overall; ++i) {
        current_statement__ = 696;
        stan::model::assign(pred_mat, stan::math::multiply(mu, 0),
          "assigning variable pred_mat",
          stan::model::index_min_max(1, stan::math::rows(mod_mat)),
          stan::model::index_uni(i));
      }
    }
    current_statement__ = 701;
    return pred_mat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_s4t_cjs_draft6d final : public model_base_crtp<model_s4t_cjs_draft6d> {
private:
  int N_m;
  int N_l;
  int N_j;
  int N_k;
  int max_t;
  int N_stations;
  int N_knownage_m;
  int N_knownage_l;
  int max_a_overall;
  int N_batches;
  int N_recap_sites;
  int N_last_sites;
  int N_not_last_sites;
  int N_theta_r;
  int N_theta_c;
  int N_p_r;
  int N_p_c;
  int N_theta_indices_r;
  int N_theta_indices_c;
  int N_theta_par;
  int N_p_indices_r;
  int N_p_indices_c;
  int N_p_par;
  int max_t_p;
  int N_site_path_length3;
  int N_not_last_sites_rev;
  int N_overall_surv;
  int N_cohort_surv;
  int N_groups;
  int N_overall_surv_r;
  int N_overall_surv_c;
  int N_cohort_surv_r;
  int N_cohort_surv_c;
  std::vector<int> set_min_a;
  std::vector<int> set_max_a;
  std::vector<int> max_s_rel;
  std::vector<int> max_t_recap;
  std::vector<int> next_site;
  std::vector<int> knownage_m;
  std::vector<int> knownage_l;
  std::vector<int> recap_sites;
  std::vector<std::vector<int>> last_sites;
  std::vector<int> not_last_sites;
  std::vector<std::vector<int>> site_path_length3;
  std::vector<int> not_last_sites_rev;
  std::vector<int> batches_list_len;
  std::vector<int> site_path_len;
  std::vector<std::vector<int>> m_matrix;
  std::vector<std::vector<int>> l_matrix;
  Eigen::Matrix<double,-1,-1> mod_mat_theta_data__;
  Eigen::Matrix<double,-1,-1> mod_mat_p_data__;
  std::vector<std::vector<int>> indices_theta;
  std::vector<std::vector<int>> indices_p_obs;
  std::vector<std::vector<int>> indices_overall_surv;
  std::vector<std::vector<int>> indices_cohort_surv;
  std::vector<std::vector<int>> batches_list;
  std::vector<std::vector<int>> site_path;
  int mod_mat_a_r;
  int mod_mat_a_c;
  int N_a_parbeta;
  int N_obsageclass;
  std::vector<int> obsageclass;
  Eigen::Matrix<double,-1,-1> mod_mat_a_beta_data__;
  int mod_mat_a_L_r;
  int mod_mat_a_L_c;
  int mod_mat_a_M_r;
  int mod_mat_a_M_c;
  int N_obsageclass_L;
  int N_obsageclass_M;
  Eigen::Matrix<double,-1,-1> mod_mat_a_L_data__;
  Eigen::Matrix<double,-1,-1> mod_mat_a_M_data__;
  std::vector<int> obsageclass_L;
  std::vector<int> obsageclass_M;
  Eigen::Matrix<double,-1,-1> fixed_ageclass_l_data__;
  Eigen::Matrix<double,-1,-1> fixed_ageclass_m_data__;
  int N_unknownage_l;
  int N_unknownage_m;
  std::vector<int> unknownage_l;
  std::vector<int> unknownage_m;
  std::vector<
    std::vector<
      std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>
    inits_theta;
  std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>
    inits_chi_array;
  std::vector<
    std::vector<
      std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>
    inits_Theta;
  std::vector<
    std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>
    inits_p_obs;
  std::vector<
    std::vector<
      std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>>
    inits_lambda_array;
  std::vector<std::vector<int>> min_ageclass_mat;
  std::vector<std::vector<int>> max_ageclass_mat;
  int alk_par_eta_1dim__;
  int log_lik_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mod_mat_theta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mod_mat_p{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mod_mat_a_beta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mod_mat_a_L{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mod_mat_a_M{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> fixed_ageclass_l{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> fixed_ageclass_m{nullptr, 0, 0};
public:
  ~model_s4t_cjs_draft6d() {}
  model_s4t_cjs_draft6d(stan::io::var_context& context__, unsigned int
                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_s4t_cjs_draft6d_namespace::model_s4t_cjs_draft6d";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 497;
      context__.validate_dims("data initialization", "N_m", "int",
        std::vector<size_t>{});
      N_m = std::numeric_limits<int>::min();
      current_statement__ = 497;
      N_m = context__.vals_i("N_m")[(1 - 1)];
      current_statement__ = 497;
      stan::math::check_greater_or_equal(function__, "N_m", N_m, 1);
      current_statement__ = 498;
      context__.validate_dims("data initialization", "N_l", "int",
        std::vector<size_t>{});
      N_l = std::numeric_limits<int>::min();
      current_statement__ = 498;
      N_l = context__.vals_i("N_l")[(1 - 1)];
      current_statement__ = 498;
      stan::math::check_greater_or_equal(function__, "N_l", N_l, 1);
      current_statement__ = 499;
      context__.validate_dims("data initialization", "N_j", "int",
        std::vector<size_t>{});
      N_j = std::numeric_limits<int>::min();
      current_statement__ = 499;
      N_j = context__.vals_i("N_j")[(1 - 1)];
      current_statement__ = 499;
      stan::math::check_greater_or_equal(function__, "N_j", N_j, 1);
      current_statement__ = 500;
      context__.validate_dims("data initialization", "N_k", "int",
        std::vector<size_t>{});
      N_k = std::numeric_limits<int>::min();
      current_statement__ = 500;
      N_k = context__.vals_i("N_k")[(1 - 1)];
      current_statement__ = 500;
      stan::math::check_greater_or_equal(function__, "N_k", N_k, 1);
      current_statement__ = 501;
      context__.validate_dims("data initialization", "max_t", "int",
        std::vector<size_t>{});
      max_t = std::numeric_limits<int>::min();
      current_statement__ = 501;
      max_t = context__.vals_i("max_t")[(1 - 1)];
      current_statement__ = 501;
      stan::math::check_greater_or_equal(function__, "max_t", max_t, 1);
      current_statement__ = 502;
      context__.validate_dims("data initialization", "N_stations", "int",
        std::vector<size_t>{});
      N_stations = std::numeric_limits<int>::min();
      current_statement__ = 502;
      N_stations = context__.vals_i("N_stations")[(1 - 1)];
      current_statement__ = 502;
      stan::math::check_greater_or_equal(function__, "N_stations",
        N_stations, 1);
      current_statement__ = 503;
      context__.validate_dims("data initialization", "N_knownage_m", "int",
        std::vector<size_t>{});
      N_knownage_m = std::numeric_limits<int>::min();
      current_statement__ = 503;
      N_knownage_m = context__.vals_i("N_knownage_m")[(1 - 1)];
      current_statement__ = 503;
      stan::math::check_greater_or_equal(function__, "N_knownage_m",
        N_knownage_m, 0);
      current_statement__ = 504;
      context__.validate_dims("data initialization", "N_knownage_l", "int",
        std::vector<size_t>{});
      N_knownage_l = std::numeric_limits<int>::min();
      current_statement__ = 504;
      N_knownage_l = context__.vals_i("N_knownage_l")[(1 - 1)];
      current_statement__ = 504;
      stan::math::check_greater_or_equal(function__, "N_knownage_l",
        N_knownage_l, 0);
      current_statement__ = 505;
      context__.validate_dims("data initialization", "max_a_overall", "int",
        std::vector<size_t>{});
      max_a_overall = std::numeric_limits<int>::min();
      current_statement__ = 505;
      max_a_overall = context__.vals_i("max_a_overall")[(1 - 1)];
      current_statement__ = 505;
      stan::math::check_greater_or_equal(function__, "max_a_overall",
        max_a_overall, 1);
      current_statement__ = 506;
      context__.validate_dims("data initialization", "N_batches", "int",
        std::vector<size_t>{});
      N_batches = std::numeric_limits<int>::min();
      current_statement__ = 506;
      N_batches = context__.vals_i("N_batches")[(1 - 1)];
      current_statement__ = 506;
      stan::math::check_greater_or_equal(function__, "N_batches", N_batches,
        1);
      current_statement__ = 507;
      context__.validate_dims("data initialization", "N_recap_sites", "int",
        std::vector<size_t>{});
      N_recap_sites = std::numeric_limits<int>::min();
      current_statement__ = 507;
      N_recap_sites = context__.vals_i("N_recap_sites")[(1 - 1)];
      current_statement__ = 507;
      stan::math::check_greater_or_equal(function__, "N_recap_sites",
        N_recap_sites, 1);
      current_statement__ = 508;
      context__.validate_dims("data initialization", "N_last_sites", "int",
        std::vector<size_t>{});
      N_last_sites = std::numeric_limits<int>::min();
      current_statement__ = 508;
      N_last_sites = context__.vals_i("N_last_sites")[(1 - 1)];
      current_statement__ = 508;
      stan::math::check_greater_or_equal(function__, "N_last_sites",
        N_last_sites, 1);
      current_statement__ = 509;
      context__.validate_dims("data initialization", "N_not_last_sites",
        "int", std::vector<size_t>{});
      N_not_last_sites = std::numeric_limits<int>::min();
      current_statement__ = 509;
      N_not_last_sites = context__.vals_i("N_not_last_sites")[(1 - 1)];
      current_statement__ = 509;
      stan::math::check_greater_or_equal(function__, "N_not_last_sites",
        N_not_last_sites, 1);
      current_statement__ = 510;
      context__.validate_dims("data initialization", "N_theta_r", "int",
        std::vector<size_t>{});
      N_theta_r = std::numeric_limits<int>::min();
      current_statement__ = 510;
      N_theta_r = context__.vals_i("N_theta_r")[(1 - 1)];
      current_statement__ = 510;
      stan::math::check_greater_or_equal(function__, "N_theta_r", N_theta_r,
        1);
      current_statement__ = 511;
      context__.validate_dims("data initialization", "N_theta_c", "int",
        std::vector<size_t>{});
      N_theta_c = std::numeric_limits<int>::min();
      current_statement__ = 511;
      N_theta_c = context__.vals_i("N_theta_c")[(1 - 1)];
      current_statement__ = 511;
      stan::math::check_greater_or_equal(function__, "N_theta_c", N_theta_c,
        1);
      current_statement__ = 512;
      context__.validate_dims("data initialization", "N_p_r", "int",
        std::vector<size_t>{});
      N_p_r = std::numeric_limits<int>::min();
      current_statement__ = 512;
      N_p_r = context__.vals_i("N_p_r")[(1 - 1)];
      current_statement__ = 512;
      stan::math::check_greater_or_equal(function__, "N_p_r", N_p_r, 1);
      current_statement__ = 513;
      context__.validate_dims("data initialization", "N_p_c", "int",
        std::vector<size_t>{});
      N_p_c = std::numeric_limits<int>::min();
      current_statement__ = 513;
      N_p_c = context__.vals_i("N_p_c")[(1 - 1)];
      current_statement__ = 513;
      stan::math::check_greater_or_equal(function__, "N_p_c", N_p_c, 1);
      current_statement__ = 514;
      context__.validate_dims("data initialization", "N_theta_indices_r",
        "int", std::vector<size_t>{});
      N_theta_indices_r = std::numeric_limits<int>::min();
      current_statement__ = 514;
      N_theta_indices_r = context__.vals_i("N_theta_indices_r")[(1 - 1)];
      current_statement__ = 514;
      stan::math::check_greater_or_equal(function__, "N_theta_indices_r",
        N_theta_indices_r, 1);
      current_statement__ = 515;
      context__.validate_dims("data initialization", "N_theta_indices_c",
        "int", std::vector<size_t>{});
      N_theta_indices_c = std::numeric_limits<int>::min();
      current_statement__ = 515;
      N_theta_indices_c = context__.vals_i("N_theta_indices_c")[(1 - 1)];
      current_statement__ = 515;
      stan::math::check_greater_or_equal(function__, "N_theta_indices_c",
        N_theta_indices_c, 1);
      current_statement__ = 516;
      context__.validate_dims("data initialization", "N_theta_par", "int",
        std::vector<size_t>{});
      N_theta_par = std::numeric_limits<int>::min();
      current_statement__ = 516;
      N_theta_par = context__.vals_i("N_theta_par")[(1 - 1)];
      current_statement__ = 516;
      stan::math::check_greater_or_equal(function__, "N_theta_par",
        N_theta_par, 1);
      current_statement__ = 517;
      context__.validate_dims("data initialization", "N_p_indices_r", "int",
        std::vector<size_t>{});
      N_p_indices_r = std::numeric_limits<int>::min();
      current_statement__ = 517;
      N_p_indices_r = context__.vals_i("N_p_indices_r")[(1 - 1)];
      current_statement__ = 517;
      stan::math::check_greater_or_equal(function__, "N_p_indices_r",
        N_p_indices_r, 1);
      current_statement__ = 518;
      context__.validate_dims("data initialization", "N_p_indices_c", "int",
        std::vector<size_t>{});
      N_p_indices_c = std::numeric_limits<int>::min();
      current_statement__ = 518;
      N_p_indices_c = context__.vals_i("N_p_indices_c")[(1 - 1)];
      current_statement__ = 518;
      stan::math::check_greater_or_equal(function__, "N_p_indices_c",
        N_p_indices_c, 1);
      current_statement__ = 519;
      context__.validate_dims("data initialization", "N_p_par", "int",
        std::vector<size_t>{});
      N_p_par = std::numeric_limits<int>::min();
      current_statement__ = 519;
      N_p_par = context__.vals_i("N_p_par")[(1 - 1)];
      current_statement__ = 519;
      stan::math::check_greater_or_equal(function__, "N_p_par", N_p_par, 1);
      current_statement__ = 520;
      context__.validate_dims("data initialization", "max_t_p", "int",
        std::vector<size_t>{});
      max_t_p = std::numeric_limits<int>::min();
      current_statement__ = 520;
      max_t_p = context__.vals_i("max_t_p")[(1 - 1)];
      current_statement__ = 520;
      stan::math::check_greater_or_equal(function__, "max_t_p", max_t_p, 1);
      current_statement__ = 521;
      context__.validate_dims("data initialization", "N_site_path_length3",
        "int", std::vector<size_t>{});
      N_site_path_length3 = std::numeric_limits<int>::min();
      current_statement__ = 521;
      N_site_path_length3 = context__.vals_i("N_site_path_length3")[(1 - 1)];
      current_statement__ = 522;
      context__.validate_dims("data initialization", "N_not_last_sites_rev",
        "int", std::vector<size_t>{});
      N_not_last_sites_rev = std::numeric_limits<int>::min();
      current_statement__ = 522;
      N_not_last_sites_rev = context__.vals_i("N_not_last_sites_rev")[(1 -
        1)];
      current_statement__ = 523;
      context__.validate_dims("data initialization", "N_overall_surv", "int",
        std::vector<size_t>{});
      N_overall_surv = std::numeric_limits<int>::min();
      current_statement__ = 523;
      N_overall_surv = context__.vals_i("N_overall_surv")[(1 - 1)];
      current_statement__ = 524;
      context__.validate_dims("data initialization", "N_cohort_surv", "int",
        std::vector<size_t>{});
      N_cohort_surv = std::numeric_limits<int>::min();
      current_statement__ = 524;
      N_cohort_surv = context__.vals_i("N_cohort_surv")[(1 - 1)];
      current_statement__ = 525;
      context__.validate_dims("data initialization", "N_groups", "int",
        std::vector<size_t>{});
      N_groups = std::numeric_limits<int>::min();
      current_statement__ = 525;
      N_groups = context__.vals_i("N_groups")[(1 - 1)];
      current_statement__ = 526;
      context__.validate_dims("data initialization", "N_overall_surv_r",
        "int", std::vector<size_t>{});
      N_overall_surv_r = std::numeric_limits<int>::min();
      current_statement__ = 526;
      N_overall_surv_r = context__.vals_i("N_overall_surv_r")[(1 - 1)];
      current_statement__ = 527;
      context__.validate_dims("data initialization", "N_overall_surv_c",
        "int", std::vector<size_t>{});
      N_overall_surv_c = std::numeric_limits<int>::min();
      current_statement__ = 527;
      N_overall_surv_c = context__.vals_i("N_overall_surv_c")[(1 - 1)];
      current_statement__ = 528;
      context__.validate_dims("data initialization", "N_cohort_surv_r",
        "int", std::vector<size_t>{});
      N_cohort_surv_r = std::numeric_limits<int>::min();
      current_statement__ = 528;
      N_cohort_surv_r = context__.vals_i("N_cohort_surv_r")[(1 - 1)];
      current_statement__ = 529;
      context__.validate_dims("data initialization", "N_cohort_surv_c",
        "int", std::vector<size_t>{});
      N_cohort_surv_c = std::numeric_limits<int>::min();
      current_statement__ = 529;
      N_cohort_surv_c = context__.vals_i("N_cohort_surv_c")[(1 - 1)];
      current_statement__ = 530;
      stan::math::validate_non_negative_index("set_min_a", "N_stations",
        N_stations);
      current_statement__ = 531;
      context__.validate_dims("data initialization", "set_min_a", "int",
        std::vector<size_t>{static_cast<size_t>(N_stations)});
      set_min_a = std::vector<int>(N_stations,
                    std::numeric_limits<int>::min());
      current_statement__ = 531;
      set_min_a = context__.vals_i("set_min_a");
      current_statement__ = 532;
      stan::math::validate_non_negative_index("set_max_a", "N_stations",
        N_stations);
      current_statement__ = 533;
      context__.validate_dims("data initialization", "set_max_a", "int",
        std::vector<size_t>{static_cast<size_t>(N_stations)});
      set_max_a = std::vector<int>(N_stations,
                    std::numeric_limits<int>::min());
      current_statement__ = 533;
      set_max_a = context__.vals_i("set_max_a");
      current_statement__ = 534;
      stan::math::validate_non_negative_index("max_s_rel", "N_j", N_j);
      current_statement__ = 535;
      context__.validate_dims("data initialization", "max_s_rel", "int",
        std::vector<size_t>{static_cast<size_t>(N_j)});
      max_s_rel = std::vector<int>(N_j, std::numeric_limits<int>::min());
      current_statement__ = 535;
      max_s_rel = context__.vals_i("max_s_rel");
      current_statement__ = 536;
      stan::math::validate_non_negative_index("max_t_recap", "N_stations",
        N_stations);
      current_statement__ = 537;
      context__.validate_dims("data initialization", "max_t_recap", "int",
        std::vector<size_t>{static_cast<size_t>(N_stations)});
      max_t_recap = std::vector<int>(N_stations,
                      std::numeric_limits<int>::min());
      current_statement__ = 537;
      max_t_recap = context__.vals_i("max_t_recap");
      current_statement__ = 538;
      stan::math::validate_non_negative_index("next_site", "N_j", N_j);
      current_statement__ = 539;
      context__.validate_dims("data initialization", "next_site", "int",
        std::vector<size_t>{static_cast<size_t>(N_j)});
      next_site = std::vector<int>(N_j, std::numeric_limits<int>::min());
      current_statement__ = 539;
      next_site = context__.vals_i("next_site");
      current_statement__ = 540;
      stan::math::validate_non_negative_index("knownage_m", "N_knownage_m",
        N_knownage_m);
      current_statement__ = 541;
      context__.validate_dims("data initialization", "knownage_m", "int",
        std::vector<size_t>{static_cast<size_t>(N_knownage_m)});
      knownage_m = std::vector<int>(N_knownage_m,
                     std::numeric_limits<int>::min());
      current_statement__ = 541;
      knownage_m = context__.vals_i("knownage_m");
      current_statement__ = 542;
      stan::math::validate_non_negative_index("knownage_l", "N_knownage_l",
        N_knownage_l);
      current_statement__ = 543;
      context__.validate_dims("data initialization", "knownage_l", "int",
        std::vector<size_t>{static_cast<size_t>(N_knownage_l)});
      knownage_l = std::vector<int>(N_knownage_l,
                     std::numeric_limits<int>::min());
      current_statement__ = 543;
      knownage_l = context__.vals_i("knownage_l");
      current_statement__ = 544;
      stan::math::validate_non_negative_index("recap_sites", "N_recap_sites",
        N_recap_sites);
      current_statement__ = 545;
      context__.validate_dims("data initialization", "recap_sites", "int",
        std::vector<size_t>{static_cast<size_t>(N_recap_sites)});
      recap_sites = std::vector<int>(N_recap_sites,
                      std::numeric_limits<int>::min());
      current_statement__ = 545;
      recap_sites = context__.vals_i("recap_sites");
      current_statement__ = 546;
      stan::math::validate_non_negative_index("last_sites", "N_last_sites",
        N_last_sites);
      current_statement__ = 547;
      context__.validate_dims("data initialization", "last_sites", "int",
        std::vector<size_t>{static_cast<size_t>(N_last_sites),
          static_cast<size_t>(1)});
      last_sites = std::vector<std::vector<int>>(N_last_sites,
                     std::vector<int>(1, std::numeric_limits<int>::min()));
      {
        std::vector<int> last_sites_flat__;
        current_statement__ = 547;
        last_sites_flat__ = context__.vals_i("last_sites");
        current_statement__ = 547;
        pos__ = 1;
        current_statement__ = 547;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 547;
          for (int sym2__ = 1; sym2__ <= N_last_sites; ++sym2__) {
            current_statement__ = 547;
            stan::model::assign(last_sites, last_sites_flat__[(pos__ - 1)],
              "assigning variable last_sites",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 547;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 548;
      stan::math::validate_non_negative_index("not_last_sites",
        "N_not_last_sites", N_not_last_sites);
      current_statement__ = 549;
      context__.validate_dims("data initialization", "not_last_sites", "int",
        std::vector<size_t>{static_cast<size_t>(N_not_last_sites)});
      not_last_sites = std::vector<int>(N_not_last_sites,
                         std::numeric_limits<int>::min());
      current_statement__ = 549;
      not_last_sites = context__.vals_i("not_last_sites");
      current_statement__ = 550;
      stan::math::validate_non_negative_index("site_path_length3",
        "N_site_path_length3", N_site_path_length3);
      current_statement__ = 551;
      context__.validate_dims("data initialization", "site_path_length3",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_site_path_length3),
          static_cast<size_t>(1)});
      site_path_length3 = std::vector<std::vector<int>>(N_site_path_length3,
                            std::vector<int>(1,
                              std::numeric_limits<int>::min()));
      {
        std::vector<int> site_path_length3_flat__;
        current_statement__ = 551;
        site_path_length3_flat__ = context__.vals_i("site_path_length3");
        current_statement__ = 551;
        pos__ = 1;
        current_statement__ = 551;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 551;
          for (int sym2__ = 1; sym2__ <= N_site_path_length3; ++sym2__) {
            current_statement__ = 551;
            stan::model::assign(site_path_length3,
              site_path_length3_flat__[(pos__ - 1)],
              "assigning variable site_path_length3",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 551;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 552;
      stan::math::validate_non_negative_index("not_last_sites_rev",
        "N_not_last_sites_rev", N_not_last_sites_rev);
      current_statement__ = 553;
      context__.validate_dims("data initialization", "not_last_sites_rev",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_not_last_sites_rev)});
      not_last_sites_rev = std::vector<int>(N_not_last_sites_rev,
                             std::numeric_limits<int>::min());
      current_statement__ = 553;
      not_last_sites_rev = context__.vals_i("not_last_sites_rev");
      current_statement__ = 554;
      stan::math::validate_non_negative_index("batches_list_len",
        "N_stations", N_stations);
      current_statement__ = 555;
      context__.validate_dims("data initialization", "batches_list_len",
        "int", std::vector<size_t>{static_cast<size_t>(N_stations)});
      batches_list_len = std::vector<int>(N_stations,
                           std::numeric_limits<int>::min());
      current_statement__ = 555;
      batches_list_len = context__.vals_i("batches_list_len");
      current_statement__ = 556;
      stan::math::validate_non_negative_index("site_path_len", "N_stations",
        N_stations);
      current_statement__ = 557;
      context__.validate_dims("data initialization", "site_path_len", "int",
        std::vector<size_t>{static_cast<size_t>(N_stations)});
      site_path_len = std::vector<int>(N_stations,
                        std::numeric_limits<int>::min());
      current_statement__ = 557;
      site_path_len = context__.vals_i("site_path_len");
      current_statement__ = 558;
      stan::math::validate_non_negative_index("m_matrix", "N_m", N_m);
      current_statement__ = 559;
      context__.validate_dims("data initialization", "m_matrix", "int",
        std::vector<size_t>{static_cast<size_t>(N_m), static_cast<size_t>(8)});
      m_matrix = std::vector<std::vector<int>>(N_m,
                   std::vector<int>(8, std::numeric_limits<int>::min()));
      {
        std::vector<int> m_matrix_flat__;
        current_statement__ = 559;
        m_matrix_flat__ = context__.vals_i("m_matrix");
        current_statement__ = 559;
        pos__ = 1;
        current_statement__ = 559;
        for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
          current_statement__ = 559;
          for (int sym2__ = 1; sym2__ <= N_m; ++sym2__) {
            current_statement__ = 559;
            stan::model::assign(m_matrix, m_matrix_flat__[(pos__ - 1)],
              "assigning variable m_matrix", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 559;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 560;
      stan::math::validate_non_negative_index("l_matrix", "N_l", N_l);
      current_statement__ = 561;
      context__.validate_dims("data initialization", "l_matrix", "int",
        std::vector<size_t>{static_cast<size_t>(N_l), static_cast<size_t>(6)});
      l_matrix = std::vector<std::vector<int>>(N_l,
                   std::vector<int>(6, std::numeric_limits<int>::min()));
      {
        std::vector<int> l_matrix_flat__;
        current_statement__ = 561;
        l_matrix_flat__ = context__.vals_i("l_matrix");
        current_statement__ = 561;
        pos__ = 1;
        current_statement__ = 561;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 561;
          for (int sym2__ = 1; sym2__ <= N_l; ++sym2__) {
            current_statement__ = 561;
            stan::model::assign(l_matrix, l_matrix_flat__[(pos__ - 1)],
              "assigning variable l_matrix", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 561;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 562;
      stan::math::validate_non_negative_index("mod_mat_theta", "N_theta_r",
        N_theta_r);
      current_statement__ = 563;
      stan::math::validate_non_negative_index("mod_mat_theta", "N_theta_c",
        N_theta_c);
      current_statement__ = 564;
      context__.validate_dims("data initialization", "mod_mat_theta",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_theta_r),
          static_cast<size_t>(N_theta_c)});
      mod_mat_theta_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_theta_r,
                               N_theta_c,
                               std::numeric_limits<double>::quiet_NaN());
      new (&mod_mat_theta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mod_mat_theta_data__.data(),
        N_theta_r, N_theta_c);
      {
        std::vector<local_scalar_t__> mod_mat_theta_flat__;
        current_statement__ = 564;
        mod_mat_theta_flat__ = context__.vals_r("mod_mat_theta");
        current_statement__ = 564;
        pos__ = 1;
        current_statement__ = 564;
        for (int sym1__ = 1; sym1__ <= N_theta_c; ++sym1__) {
          current_statement__ = 564;
          for (int sym2__ = 1; sym2__ <= N_theta_r; ++sym2__) {
            current_statement__ = 564;
            stan::model::assign(mod_mat_theta, mod_mat_theta_flat__[(pos__ -
              1)], "assigning variable mod_mat_theta",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 564;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 565;
      stan::math::validate_non_negative_index("mod_mat_p", "N_p_r", N_p_r);
      current_statement__ = 566;
      stan::math::validate_non_negative_index("mod_mat_p", "N_p_c", N_p_c);
      current_statement__ = 567;
      context__.validate_dims("data initialization", "mod_mat_p", "double",
        std::vector<size_t>{static_cast<size_t>(N_p_r),
          static_cast<size_t>(N_p_c)});
      mod_mat_p_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_p_r, N_p_c,
                           std::numeric_limits<double>::quiet_NaN());
      new (&mod_mat_p)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mod_mat_p_data__.data(),
        N_p_r, N_p_c);
      {
        std::vector<local_scalar_t__> mod_mat_p_flat__;
        current_statement__ = 567;
        mod_mat_p_flat__ = context__.vals_r("mod_mat_p");
        current_statement__ = 567;
        pos__ = 1;
        current_statement__ = 567;
        for (int sym1__ = 1; sym1__ <= N_p_c; ++sym1__) {
          current_statement__ = 567;
          for (int sym2__ = 1; sym2__ <= N_p_r; ++sym2__) {
            current_statement__ = 567;
            stan::model::assign(mod_mat_p, mod_mat_p_flat__[(pos__ - 1)],
              "assigning variable mod_mat_p", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 567;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 568;
      stan::math::validate_non_negative_index("indices_theta",
        "N_theta_indices_r", N_theta_indices_r);
      current_statement__ = 569;
      stan::math::validate_non_negative_index("indices_theta",
        "N_theta_indices_c", N_theta_indices_c);
      current_statement__ = 570;
      context__.validate_dims("data initialization", "indices_theta", "int",
        std::vector<size_t>{static_cast<size_t>(N_theta_indices_r),
          static_cast<size_t>(N_theta_indices_c)});
      indices_theta = std::vector<std::vector<int>>(N_theta_indices_r,
                        std::vector<int>(N_theta_indices_c,
                          std::numeric_limits<int>::min()));
      {
        std::vector<int> indices_theta_flat__;
        current_statement__ = 570;
        indices_theta_flat__ = context__.vals_i("indices_theta");
        current_statement__ = 570;
        pos__ = 1;
        current_statement__ = 570;
        for (int sym1__ = 1; sym1__ <= N_theta_indices_c; ++sym1__) {
          current_statement__ = 570;
          for (int sym2__ = 1; sym2__ <= N_theta_indices_r; ++sym2__) {
            current_statement__ = 570;
            stan::model::assign(indices_theta, indices_theta_flat__[(pos__ -
              1)], "assigning variable indices_theta",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 570;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 571;
      stan::math::validate_non_negative_index("indices_p_obs",
        "N_p_indices_r", N_p_indices_r);
      current_statement__ = 572;
      stan::math::validate_non_negative_index("indices_p_obs",
        "N_p_indices_c", N_p_indices_c);
      current_statement__ = 573;
      context__.validate_dims("data initialization", "indices_p_obs", "int",
        std::vector<size_t>{static_cast<size_t>(N_p_indices_r),
          static_cast<size_t>(N_p_indices_c)});
      indices_p_obs = std::vector<std::vector<int>>(N_p_indices_r,
                        std::vector<int>(N_p_indices_c,
                          std::numeric_limits<int>::min()));
      {
        std::vector<int> indices_p_obs_flat__;
        current_statement__ = 573;
        indices_p_obs_flat__ = context__.vals_i("indices_p_obs");
        current_statement__ = 573;
        pos__ = 1;
        current_statement__ = 573;
        for (int sym1__ = 1; sym1__ <= N_p_indices_c; ++sym1__) {
          current_statement__ = 573;
          for (int sym2__ = 1; sym2__ <= N_p_indices_r; ++sym2__) {
            current_statement__ = 573;
            stan::model::assign(indices_p_obs, indices_p_obs_flat__[(pos__ -
              1)], "assigning variable indices_p_obs",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 573;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 574;
      stan::math::validate_non_negative_index("indices_overall_surv",
        "N_overall_surv_r", N_overall_surv_r);
      current_statement__ = 575;
      stan::math::validate_non_negative_index("indices_overall_surv",
        "N_overall_surv_c", N_overall_surv_c);
      current_statement__ = 576;
      context__.validate_dims("data initialization", "indices_overall_surv",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_overall_surv_r),
          static_cast<size_t>(N_overall_surv_c)});
      indices_overall_surv = std::vector<std::vector<int>>(N_overall_surv_r,
                               std::vector<int>(N_overall_surv_c,
                                 std::numeric_limits<int>::min()));
      {
        std::vector<int> indices_overall_surv_flat__;
        current_statement__ = 576;
        indices_overall_surv_flat__ = context__.vals_i("indices_overall_surv");
        current_statement__ = 576;
        pos__ = 1;
        current_statement__ = 576;
        for (int sym1__ = 1; sym1__ <= N_overall_surv_c; ++sym1__) {
          current_statement__ = 576;
          for (int sym2__ = 1; sym2__ <= N_overall_surv_r; ++sym2__) {
            current_statement__ = 576;
            stan::model::assign(indices_overall_surv,
              indices_overall_surv_flat__[(pos__ - 1)],
              "assigning variable indices_overall_surv",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 576;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 577;
      stan::math::validate_non_negative_index("indices_cohort_surv",
        "N_cohort_surv_r", N_cohort_surv_r);
      current_statement__ = 578;
      stan::math::validate_non_negative_index("indices_cohort_surv",
        "N_cohort_surv_c", N_cohort_surv_c);
      current_statement__ = 579;
      context__.validate_dims("data initialization", "indices_cohort_surv",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_cohort_surv_r),
          static_cast<size_t>(N_cohort_surv_c)});
      indices_cohort_surv = std::vector<std::vector<int>>(N_cohort_surv_r,
                              std::vector<int>(N_cohort_surv_c,
                                std::numeric_limits<int>::min()));
      {
        std::vector<int> indices_cohort_surv_flat__;
        current_statement__ = 579;
        indices_cohort_surv_flat__ = context__.vals_i("indices_cohort_surv");
        current_statement__ = 579;
        pos__ = 1;
        current_statement__ = 579;
        for (int sym1__ = 1; sym1__ <= N_cohort_surv_c; ++sym1__) {
          current_statement__ = 579;
          for (int sym2__ = 1; sym2__ <= N_cohort_surv_r; ++sym2__) {
            current_statement__ = 579;
            stan::model::assign(indices_cohort_surv,
              indices_cohort_surv_flat__[(pos__ - 1)],
              "assigning variable indices_cohort_surv",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 579;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 580;
      stan::math::validate_non_negative_index("batches_list", "N_stations",
        N_stations);
      current_statement__ = 581;
      stan::math::validate_non_negative_index("batches_list",
        "max(batches_list_len)", stan::math::max(batches_list_len));
      current_statement__ = 582;
      context__.validate_dims("data initialization", "batches_list", "int",
        std::vector<size_t>{static_cast<size_t>(N_stations),
          static_cast<size_t>(stan::math::max(batches_list_len))});
      batches_list = std::vector<std::vector<int>>(N_stations,
                       std::vector<int>(stan::math::max(batches_list_len),
                         std::numeric_limits<int>::min()));
      {
        std::vector<int> batches_list_flat__;
        current_statement__ = 582;
        batches_list_flat__ = context__.vals_i("batches_list");
        current_statement__ = 582;
        pos__ = 1;
        current_statement__ = 582;
        for (int sym1__ = 1; sym1__ <=
             stan::math::max(batches_list_len); ++sym1__) {
          current_statement__ = 582;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 582;
            stan::model::assign(batches_list, batches_list_flat__[(pos__ -
              1)], "assigning variable batches_list",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 582;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 583;
      stan::math::validate_non_negative_index("site_path", "N_stations",
        N_stations);
      current_statement__ = 584;
      stan::math::validate_non_negative_index("site_path",
        "max(site_path_len)", stan::math::max(site_path_len));
      current_statement__ = 585;
      context__.validate_dims("data initialization", "site_path", "int",
        std::vector<size_t>{static_cast<size_t>(N_stations),
          static_cast<size_t>(stan::math::max(site_path_len))});
      site_path = std::vector<std::vector<int>>(N_stations,
                    std::vector<int>(stan::math::max(site_path_len),
                      std::numeric_limits<int>::min()));
      {
        std::vector<int> site_path_flat__;
        current_statement__ = 585;
        site_path_flat__ = context__.vals_i("site_path");
        current_statement__ = 585;
        pos__ = 1;
        current_statement__ = 585;
        for (int sym1__ = 1; sym1__ <=
             stan::math::max(site_path_len); ++sym1__) {
          current_statement__ = 585;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 585;
            stan::model::assign(site_path, site_path_flat__[(pos__ - 1)],
              "assigning variable site_path", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 585;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 586;
      context__.validate_dims("data initialization", "mod_mat_a_r", "int",
        std::vector<size_t>{});
      mod_mat_a_r = std::numeric_limits<int>::min();
      current_statement__ = 586;
      mod_mat_a_r = context__.vals_i("mod_mat_a_r")[(1 - 1)];
      current_statement__ = 586;
      stan::math::check_greater_or_equal(function__, "mod_mat_a_r",
        mod_mat_a_r, 1);
      current_statement__ = 587;
      context__.validate_dims("data initialization", "mod_mat_a_c", "int",
        std::vector<size_t>{});
      mod_mat_a_c = std::numeric_limits<int>::min();
      current_statement__ = 587;
      mod_mat_a_c = context__.vals_i("mod_mat_a_c")[(1 - 1)];
      current_statement__ = 587;
      stan::math::check_greater_or_equal(function__, "mod_mat_a_c",
        mod_mat_a_c, 1);
      current_statement__ = 588;
      context__.validate_dims("data initialization", "N_a_parbeta", "int",
        std::vector<size_t>{});
      N_a_parbeta = std::numeric_limits<int>::min();
      current_statement__ = 588;
      N_a_parbeta = context__.vals_i("N_a_parbeta")[(1 - 1)];
      current_statement__ = 588;
      stan::math::check_greater_or_equal(function__, "N_a_parbeta",
        N_a_parbeta, 1);
      current_statement__ = 589;
      context__.validate_dims("data initialization", "N_obsageclass", "int",
        std::vector<size_t>{});
      N_obsageclass = std::numeric_limits<int>::min();
      current_statement__ = 589;
      N_obsageclass = context__.vals_i("N_obsageclass")[(1 - 1)];
      current_statement__ = 589;
      stan::math::check_greater_or_equal(function__, "N_obsageclass",
        N_obsageclass, 1);
      current_statement__ = 590;
      stan::math::validate_non_negative_index("obsageclass", "N_obsageclass",
        N_obsageclass);
      current_statement__ = 591;
      context__.validate_dims("data initialization", "obsageclass", "int",
        std::vector<size_t>{static_cast<size_t>(N_obsageclass)});
      obsageclass = std::vector<int>(N_obsageclass,
                      std::numeric_limits<int>::min());
      current_statement__ = 591;
      obsageclass = context__.vals_i("obsageclass");
      current_statement__ = 592;
      stan::math::validate_non_negative_index("mod_mat_a_beta",
        "mod_mat_a_r", mod_mat_a_r);
      current_statement__ = 593;
      stan::math::validate_non_negative_index("mod_mat_a_beta",
        "mod_mat_a_c - 1", (mod_mat_a_c - 1));
      current_statement__ = 594;
      context__.validate_dims("data initialization", "mod_mat_a_beta",
        "double",
        std::vector<size_t>{static_cast<size_t>(mod_mat_a_r),
          static_cast<size_t>((mod_mat_a_c - 1))});
      mod_mat_a_beta_data__ = Eigen::Matrix<double,-1,-1>::Constant(mod_mat_a_r,
                                (mod_mat_a_c - 1),
                                std::numeric_limits<double>::quiet_NaN());
      new (&mod_mat_a_beta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mod_mat_a_beta_data__.data(),
        mod_mat_a_r, (mod_mat_a_c - 1));
      {
        std::vector<local_scalar_t__> mod_mat_a_beta_flat__;
        current_statement__ = 594;
        mod_mat_a_beta_flat__ = context__.vals_r("mod_mat_a_beta");
        current_statement__ = 594;
        pos__ = 1;
        current_statement__ = 594;
        for (int sym1__ = 1; sym1__ <= (mod_mat_a_c - 1); ++sym1__) {
          current_statement__ = 594;
          for (int sym2__ = 1; sym2__ <= mod_mat_a_r; ++sym2__) {
            current_statement__ = 594;
            stan::model::assign(mod_mat_a_beta, mod_mat_a_beta_flat__[(pos__
              - 1)], "assigning variable mod_mat_a_beta",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 594;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 595;
      context__.validate_dims("data initialization", "mod_mat_a_L_r", "int",
        std::vector<size_t>{});
      mod_mat_a_L_r = std::numeric_limits<int>::min();
      current_statement__ = 595;
      mod_mat_a_L_r = context__.vals_i("mod_mat_a_L_r")[(1 - 1)];
      current_statement__ = 596;
      context__.validate_dims("data initialization", "mod_mat_a_L_c", "int",
        std::vector<size_t>{});
      mod_mat_a_L_c = std::numeric_limits<int>::min();
      current_statement__ = 596;
      mod_mat_a_L_c = context__.vals_i("mod_mat_a_L_c")[(1 - 1)];
      current_statement__ = 597;
      context__.validate_dims("data initialization", "mod_mat_a_M_r", "int",
        std::vector<size_t>{});
      mod_mat_a_M_r = std::numeric_limits<int>::min();
      current_statement__ = 597;
      mod_mat_a_M_r = context__.vals_i("mod_mat_a_M_r")[(1 - 1)];
      current_statement__ = 598;
      context__.validate_dims("data initialization", "mod_mat_a_M_c", "int",
        std::vector<size_t>{});
      mod_mat_a_M_c = std::numeric_limits<int>::min();
      current_statement__ = 598;
      mod_mat_a_M_c = context__.vals_i("mod_mat_a_M_c")[(1 - 1)];
      current_statement__ = 599;
      context__.validate_dims("data initialization", "N_obsageclass_L",
        "int", std::vector<size_t>{});
      N_obsageclass_L = std::numeric_limits<int>::min();
      current_statement__ = 599;
      N_obsageclass_L = context__.vals_i("N_obsageclass_L")[(1 - 1)];
      current_statement__ = 600;
      context__.validate_dims("data initialization", "N_obsageclass_M",
        "int", std::vector<size_t>{});
      N_obsageclass_M = std::numeric_limits<int>::min();
      current_statement__ = 600;
      N_obsageclass_M = context__.vals_i("N_obsageclass_M")[(1 - 1)];
      current_statement__ = 601;
      stan::math::validate_non_negative_index("mod_mat_a_L", "mod_mat_a_L_r",
        mod_mat_a_L_r);
      current_statement__ = 602;
      stan::math::validate_non_negative_index("mod_mat_a_L",
        "mod_mat_a_L_c - 1", (mod_mat_a_L_c - 1));
      current_statement__ = 603;
      context__.validate_dims("data initialization", "mod_mat_a_L", "double",
        std::vector<size_t>{static_cast<size_t>(mod_mat_a_L_r),
          static_cast<size_t>((mod_mat_a_L_c - 1))});
      mod_mat_a_L_data__ = Eigen::Matrix<double,-1,-1>::Constant(mod_mat_a_L_r,
                             (mod_mat_a_L_c - 1),
                             std::numeric_limits<double>::quiet_NaN());
      new (&mod_mat_a_L)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mod_mat_a_L_data__.data(),
        mod_mat_a_L_r, (mod_mat_a_L_c - 1));
      {
        std::vector<local_scalar_t__> mod_mat_a_L_flat__;
        current_statement__ = 603;
        mod_mat_a_L_flat__ = context__.vals_r("mod_mat_a_L");
        current_statement__ = 603;
        pos__ = 1;
        current_statement__ = 603;
        for (int sym1__ = 1; sym1__ <= (mod_mat_a_L_c - 1); ++sym1__) {
          current_statement__ = 603;
          for (int sym2__ = 1; sym2__ <= mod_mat_a_L_r; ++sym2__) {
            current_statement__ = 603;
            stan::model::assign(mod_mat_a_L, mod_mat_a_L_flat__[(pos__ - 1)],
              "assigning variable mod_mat_a_L",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 603;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 604;
      stan::math::validate_non_negative_index("mod_mat_a_M", "mod_mat_a_M_r",
        mod_mat_a_M_r);
      current_statement__ = 605;
      stan::math::validate_non_negative_index("mod_mat_a_M",
        "mod_mat_a_M_c - 1", (mod_mat_a_M_c - 1));
      current_statement__ = 606;
      context__.validate_dims("data initialization", "mod_mat_a_M", "double",
        std::vector<size_t>{static_cast<size_t>(mod_mat_a_M_r),
          static_cast<size_t>((mod_mat_a_M_c - 1))});
      mod_mat_a_M_data__ = Eigen::Matrix<double,-1,-1>::Constant(mod_mat_a_M_r,
                             (mod_mat_a_M_c - 1),
                             std::numeric_limits<double>::quiet_NaN());
      new (&mod_mat_a_M)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mod_mat_a_M_data__.data(),
        mod_mat_a_M_r, (mod_mat_a_M_c - 1));
      {
        std::vector<local_scalar_t__> mod_mat_a_M_flat__;
        current_statement__ = 606;
        mod_mat_a_M_flat__ = context__.vals_r("mod_mat_a_M");
        current_statement__ = 606;
        pos__ = 1;
        current_statement__ = 606;
        for (int sym1__ = 1; sym1__ <= (mod_mat_a_M_c - 1); ++sym1__) {
          current_statement__ = 606;
          for (int sym2__ = 1; sym2__ <= mod_mat_a_M_r; ++sym2__) {
            current_statement__ = 606;
            stan::model::assign(mod_mat_a_M, mod_mat_a_M_flat__[(pos__ - 1)],
              "assigning variable mod_mat_a_M",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 606;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 607;
      stan::math::validate_non_negative_index("obsageclass_L",
        "N_obsageclass_L", N_obsageclass_L);
      current_statement__ = 608;
      context__.validate_dims("data initialization", "obsageclass_L", "int",
        std::vector<size_t>{static_cast<size_t>(N_obsageclass_L)});
      obsageclass_L = std::vector<int>(N_obsageclass_L,
                        std::numeric_limits<int>::min());
      current_statement__ = 608;
      obsageclass_L = context__.vals_i("obsageclass_L");
      current_statement__ = 609;
      stan::math::validate_non_negative_index("obsageclass_M",
        "N_obsageclass_M", N_obsageclass_M);
      current_statement__ = 610;
      context__.validate_dims("data initialization", "obsageclass_M", "int",
        std::vector<size_t>{static_cast<size_t>(N_obsageclass_M)});
      obsageclass_M = std::vector<int>(N_obsageclass_M,
                        std::numeric_limits<int>::min());
      current_statement__ = 610;
      obsageclass_M = context__.vals_i("obsageclass_M");
      current_statement__ = 611;
      stan::math::validate_non_negative_index("fixed_ageclass_l",
        "mod_mat_a_L_r", mod_mat_a_L_r);
      current_statement__ = 612;
      stan::math::validate_non_negative_index("fixed_ageclass_l",
        "max_a_overall", max_a_overall);
      current_statement__ = 613;
      context__.validate_dims("data initialization", "fixed_ageclass_l",
        "double",
        std::vector<size_t>{static_cast<size_t>(mod_mat_a_L_r),
          static_cast<size_t>(max_a_overall)});
      fixed_ageclass_l_data__ = Eigen::Matrix<double,-1,-1>::Constant(mod_mat_a_L_r,
                                  max_a_overall,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&fixed_ageclass_l)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(fixed_ageclass_l_data__.data(),
        mod_mat_a_L_r, max_a_overall);
      {
        std::vector<local_scalar_t__> fixed_ageclass_l_flat__;
        current_statement__ = 613;
        fixed_ageclass_l_flat__ = context__.vals_r("fixed_ageclass_l");
        current_statement__ = 613;
        pos__ = 1;
        current_statement__ = 613;
        for (int sym1__ = 1; sym1__ <= max_a_overall; ++sym1__) {
          current_statement__ = 613;
          for (int sym2__ = 1; sym2__ <= mod_mat_a_L_r; ++sym2__) {
            current_statement__ = 613;
            stan::model::assign(fixed_ageclass_l,
              fixed_ageclass_l_flat__[(pos__ - 1)],
              "assigning variable fixed_ageclass_l",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 613;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 614;
      stan::math::validate_non_negative_index("fixed_ageclass_m",
        "mod_mat_a_M_r", mod_mat_a_M_r);
      current_statement__ = 615;
      stan::math::validate_non_negative_index("fixed_ageclass_m",
        "max_a_overall", max_a_overall);
      current_statement__ = 616;
      context__.validate_dims("data initialization", "fixed_ageclass_m",
        "double",
        std::vector<size_t>{static_cast<size_t>(mod_mat_a_M_r),
          static_cast<size_t>(max_a_overall)});
      fixed_ageclass_m_data__ = Eigen::Matrix<double,-1,-1>::Constant(mod_mat_a_M_r,
                                  max_a_overall,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&fixed_ageclass_m)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(fixed_ageclass_m_data__.data(),
        mod_mat_a_M_r, max_a_overall);
      {
        std::vector<local_scalar_t__> fixed_ageclass_m_flat__;
        current_statement__ = 616;
        fixed_ageclass_m_flat__ = context__.vals_r("fixed_ageclass_m");
        current_statement__ = 616;
        pos__ = 1;
        current_statement__ = 616;
        for (int sym1__ = 1; sym1__ <= max_a_overall; ++sym1__) {
          current_statement__ = 616;
          for (int sym2__ = 1; sym2__ <= mod_mat_a_M_r; ++sym2__) {
            current_statement__ = 616;
            stan::model::assign(fixed_ageclass_m,
              fixed_ageclass_m_flat__[(pos__ - 1)],
              "assigning variable fixed_ageclass_m",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 616;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 617;
      context__.validate_dims("data initialization", "N_unknownage_l", "int",
        std::vector<size_t>{});
      N_unknownage_l = std::numeric_limits<int>::min();
      current_statement__ = 617;
      N_unknownage_l = context__.vals_i("N_unknownage_l")[(1 - 1)];
      current_statement__ = 618;
      context__.validate_dims("data initialization", "N_unknownage_m", "int",
        std::vector<size_t>{});
      N_unknownage_m = std::numeric_limits<int>::min();
      current_statement__ = 618;
      N_unknownage_m = context__.vals_i("N_unknownage_m")[(1 - 1)];
      current_statement__ = 619;
      stan::math::validate_non_negative_index("unknownage_l",
        "N_unknownage_l", N_unknownage_l);
      current_statement__ = 620;
      context__.validate_dims("data initialization", "unknownage_l", "int",
        std::vector<size_t>{static_cast<size_t>(N_unknownage_l)});
      unknownage_l = std::vector<int>(N_unknownage_l,
                       std::numeric_limits<int>::min());
      current_statement__ = 620;
      unknownage_l = context__.vals_i("unknownage_l");
      current_statement__ = 621;
      stan::math::validate_non_negative_index("unknownage_m",
        "N_unknownage_m", N_unknownage_m);
      current_statement__ = 622;
      context__.validate_dims("data initialization", "unknownage_m", "int",
        std::vector<size_t>{static_cast<size_t>(N_unknownage_m)});
      unknownage_m = std::vector<int>(N_unknownage_m,
                       std::numeric_limits<int>::min());
      current_statement__ = 622;
      unknownage_m = context__.vals_i("unknownage_m");
      current_statement__ = 623;
      stan::math::validate_non_negative_index("inits_theta", "N_groups",
        N_groups);
      current_statement__ = 624;
      stan::math::validate_non_negative_index("inits_theta", "N_stations",
        N_stations);
      current_statement__ = 625;
      stan::math::validate_non_negative_index("inits_theta", "max_t", max_t);
      current_statement__ = 626;
      stan::math::validate_non_negative_index("inits_theta", "N_batches",
        N_batches);
      current_statement__ = 627;
      stan::math::validate_non_negative_index("inits_theta", "max_a_overall",
        max_a_overall);
      current_statement__ = 628;
      stan::math::validate_non_negative_index("inits_theta", "max_a_overall",
        max_a_overall);
      current_statement__ = 629;
      context__.validate_dims("data initialization", "inits_theta", "double",
        std::vector<size_t>{static_cast<size_t>(N_groups),
          static_cast<size_t>(N_stations), static_cast<size_t>(max_t),
          static_cast<size_t>(N_batches), static_cast<size_t>(max_a_overall),
          static_cast<size_t>(max_a_overall)});
      inits_theta = std::vector<
                      std::vector<
                        std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>>>>(N_groups,
                      std::vector<
                        std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>>>(N_stations,
                        std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>>(max_t,
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>(N_batches,
                            std::vector<Eigen::Matrix<double,-1,1>>(max_a_overall,
                              Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                                std::numeric_limits<double>::quiet_NaN()))))));
      {
        std::vector<local_scalar_t__> inits_theta_flat__;
        current_statement__ = 629;
        inits_theta_flat__ = context__.vals_r("inits_theta");
        current_statement__ = 629;
        pos__ = 1;
        current_statement__ = 629;
        for (int sym1__ = 1; sym1__ <= max_a_overall; ++sym1__) {
          current_statement__ = 629;
          for (int sym2__ = 1; sym2__ <= max_a_overall; ++sym2__) {
            current_statement__ = 629;
            for (int sym3__ = 1; sym3__ <= N_batches; ++sym3__) {
              current_statement__ = 629;
              for (int sym4__ = 1; sym4__ <= max_t; ++sym4__) {
                current_statement__ = 629;
                for (int sym5__ = 1; sym5__ <= N_stations; ++sym5__) {
                  current_statement__ = 629;
                  for (int sym6__ = 1; sym6__ <= N_groups; ++sym6__) {
                    current_statement__ = 629;
                    stan::model::assign(inits_theta,
                      inits_theta_flat__[(pos__ - 1)],
                      "assigning variable inits_theta",
                      stan::model::index_uni(sym6__),
                      stan::model::index_uni(sym5__),
                      stan::model::index_uni(sym4__),
                      stan::model::index_uni(sym3__),
                      stan::model::index_uni(sym2__),
                      stan::model::index_uni(sym1__));
                    current_statement__ = 629;
                    pos__ = (pos__ + 1);
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 630;
      stan::math::validate_non_negative_index("inits_chi_array", "N_groups",
        N_groups);
      current_statement__ = 631;
      stan::math::validate_non_negative_index("inits_chi_array",
        "N_stations", N_stations);
      current_statement__ = 632;
      stan::math::validate_non_negative_index("inits_chi_array", "N_batches",
        N_batches);
      current_statement__ = 633;
      stan::math::validate_non_negative_index("inits_chi_array", "max_t",
        max_t);
      current_statement__ = 634;
      stan::math::validate_non_negative_index("inits_chi_array",
        "max_a_overall", max_a_overall);
      current_statement__ = 635;
      context__.validate_dims("data initialization", "inits_chi_array",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_groups),
          static_cast<size_t>(N_stations), static_cast<size_t>(N_batches),
          static_cast<size_t>(max_t), static_cast<size_t>(max_a_overall)});
      inits_chi_array = std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,-1>>>>(N_groups,
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,-1>>>(N_stations,
                            std::vector<Eigen::Matrix<double,-1,-1>>(N_batches,
                              Eigen::Matrix<double,-1,-1>::Constant(max_t,
                                max_a_overall,
                                std::numeric_limits<double>::quiet_NaN()))));
      {
        std::vector<local_scalar_t__> inits_chi_array_flat__;
        current_statement__ = 635;
        inits_chi_array_flat__ = context__.vals_r("inits_chi_array");
        current_statement__ = 635;
        pos__ = 1;
        current_statement__ = 635;
        for (int sym1__ = 1; sym1__ <= max_a_overall; ++sym1__) {
          current_statement__ = 635;
          for (int sym2__ = 1; sym2__ <= max_t; ++sym2__) {
            current_statement__ = 635;
            for (int sym3__ = 1; sym3__ <= N_batches; ++sym3__) {
              current_statement__ = 635;
              for (int sym4__ = 1; sym4__ <= N_stations; ++sym4__) {
                current_statement__ = 635;
                for (int sym5__ = 1; sym5__ <= N_groups; ++sym5__) {
                  current_statement__ = 635;
                  stan::model::assign(inits_chi_array,
                    inits_chi_array_flat__[(pos__ - 1)],
                    "assigning variable inits_chi_array",
                    stan::model::index_uni(sym5__),
                    stan::model::index_uni(sym4__),
                    stan::model::index_uni(sym3__),
                    stan::model::index_uni(sym2__),
                    stan::model::index_uni(sym1__));
                  current_statement__ = 635;
                  pos__ = (pos__ + 1);
                }
              }
            }
          }
        }
      }
      current_statement__ = 636;
      stan::math::validate_non_negative_index("inits_Theta", "N_groups",
        N_groups);
      current_statement__ = 637;
      stan::math::validate_non_negative_index("inits_Theta", "N_stations",
        N_stations);
      current_statement__ = 638;
      stan::math::validate_non_negative_index("inits_Theta", "max_t", max_t);
      current_statement__ = 639;
      stan::math::validate_non_negative_index("inits_Theta", "N_batches",
        N_batches);
      current_statement__ = 640;
      stan::math::validate_non_negative_index("inits_Theta", "max_a_overall",
        max_a_overall);
      current_statement__ = 641;
      stan::math::validate_non_negative_index("inits_Theta",
        "max_a_overall + 1", (max_a_overall + 1));
      current_statement__ = 642;
      context__.validate_dims("data initialization", "inits_Theta", "double",
        std::vector<size_t>{static_cast<size_t>(N_groups),
          static_cast<size_t>(N_stations), static_cast<size_t>(max_t),
          static_cast<size_t>(N_batches), static_cast<size_t>(max_a_overall),
          static_cast<size_t>((max_a_overall + 1))});
      inits_Theta = std::vector<
                      std::vector<
                        std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>>>>(N_groups,
                      std::vector<
                        std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>>>(N_stations,
                        std::vector<
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>>(max_t,
                          std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>(N_batches,
                            std::vector<Eigen::Matrix<double,-1,1>>(max_a_overall,
                              Eigen::Matrix<double,-1,1>::Constant((max_a_overall
                                + 1),
                                std::numeric_limits<double>::quiet_NaN()))))));
      {
        std::vector<local_scalar_t__> inits_Theta_flat__;
        current_statement__ = 642;
        inits_Theta_flat__ = context__.vals_r("inits_Theta");
        current_statement__ = 642;
        pos__ = 1;
        current_statement__ = 642;
        for (int sym1__ = 1; sym1__ <= (max_a_overall + 1); ++sym1__) {
          current_statement__ = 642;
          for (int sym2__ = 1; sym2__ <= max_a_overall; ++sym2__) {
            current_statement__ = 642;
            for (int sym3__ = 1; sym3__ <= N_batches; ++sym3__) {
              current_statement__ = 642;
              for (int sym4__ = 1; sym4__ <= max_t; ++sym4__) {
                current_statement__ = 642;
                for (int sym5__ = 1; sym5__ <= N_stations; ++sym5__) {
                  current_statement__ = 642;
                  for (int sym6__ = 1; sym6__ <= N_groups; ++sym6__) {
                    current_statement__ = 642;
                    stan::model::assign(inits_Theta,
                      inits_Theta_flat__[(pos__ - 1)],
                      "assigning variable inits_Theta",
                      stan::model::index_uni(sym6__),
                      stan::model::index_uni(sym5__),
                      stan::model::index_uni(sym4__),
                      stan::model::index_uni(sym3__),
                      stan::model::index_uni(sym2__),
                      stan::model::index_uni(sym1__));
                    current_statement__ = 642;
                    pos__ = (pos__ + 1);
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 643;
      stan::math::validate_non_negative_index("inits_p_obs", "N_groups",
        N_groups);
      current_statement__ = 644;
      stan::math::validate_non_negative_index("inits_p_obs", "N_stations",
        N_stations);
      current_statement__ = 645;
      stan::math::validate_non_negative_index("inits_p_obs", "N_batches",
        N_batches);
      current_statement__ = 646;
      stan::math::validate_non_negative_index("inits_p_obs", "max_t", max_t);
      current_statement__ = 647;
      stan::math::validate_non_negative_index("inits_p_obs", "max_a_overall",
        max_a_overall);
      current_statement__ = 648;
      stan::math::validate_non_negative_index("inits_p_obs", "max_a_overall",
        max_a_overall);
      current_statement__ = 649;
      context__.validate_dims("data initialization", "inits_p_obs", "double",
        std::vector<size_t>{static_cast<size_t>(N_groups),
          static_cast<size_t>(N_stations), static_cast<size_t>(N_batches),
          static_cast<size_t>(max_t), static_cast<size_t>(max_a_overall),
          static_cast<size_t>(max_a_overall)});
      inits_p_obs = std::vector<
                      std::vector<
                        std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>(N_groups,
                      std::vector<
                        std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>(N_stations,
                        std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(N_batches,
                          std::vector<Eigen::Matrix<double,-1,-1>>(max_t,
                            Eigen::Matrix<double,-1,-1>::Constant(max_a_overall,
                              max_a_overall,
                              std::numeric_limits<double>::quiet_NaN())))));
      {
        std::vector<local_scalar_t__> inits_p_obs_flat__;
        current_statement__ = 649;
        inits_p_obs_flat__ = context__.vals_r("inits_p_obs");
        current_statement__ = 649;
        pos__ = 1;
        current_statement__ = 649;
        for (int sym1__ = 1; sym1__ <= max_a_overall; ++sym1__) {
          current_statement__ = 649;
          for (int sym2__ = 1; sym2__ <= max_a_overall; ++sym2__) {
            current_statement__ = 649;
            for (int sym3__ = 1; sym3__ <= max_t; ++sym3__) {
              current_statement__ = 649;
              for (int sym4__ = 1; sym4__ <= N_batches; ++sym4__) {
                current_statement__ = 649;
                for (int sym5__ = 1; sym5__ <= N_stations; ++sym5__) {
                  current_statement__ = 649;
                  for (int sym6__ = 1; sym6__ <= N_groups; ++sym6__) {
                    current_statement__ = 649;
                    stan::model::assign(inits_p_obs,
                      inits_p_obs_flat__[(pos__ - 1)],
                      "assigning variable inits_p_obs",
                      stan::model::index_uni(sym6__),
                      stan::model::index_uni(sym5__),
                      stan::model::index_uni(sym4__),
                      stan::model::index_uni(sym3__),
                      stan::model::index_uni(sym2__),
                      stan::model::index_uni(sym1__));
                    current_statement__ = 649;
                    pos__ = (pos__ + 1);
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 650;
      stan::math::validate_non_negative_index("inits_lambda_array",
        "N_groups", N_groups);
      current_statement__ = 651;
      stan::math::validate_non_negative_index("inits_lambda_array",
        "N_stations", N_stations);
      current_statement__ = 652;
      stan::math::validate_non_negative_index("inits_lambda_array",
        "N_stations", N_stations);
      current_statement__ = 653;
      stan::math::validate_non_negative_index("inits_lambda_array", "max_t",
        max_t);
      current_statement__ = 654;
      stan::math::validate_non_negative_index("inits_lambda_array",
        "N_batches", N_batches);
      current_statement__ = 655;
      stan::math::validate_non_negative_index("inits_lambda_array", "max_t",
        max_t);
      current_statement__ = 656;
      stan::math::validate_non_negative_index("inits_lambda_array",
        "max_a_overall", max_a_overall);
      current_statement__ = 657;
      context__.validate_dims("data initialization", "inits_lambda_array",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_groups),
          static_cast<size_t>(N_stations), static_cast<size_t>(N_stations),
          static_cast<size_t>(max_t), static_cast<size_t>(N_batches),
          static_cast<size_t>(max_t), static_cast<size_t>(max_a_overall)});
      inits_lambda_array = std::vector<
                             std::vector<
                               std::vector<
                                 std::vector<
                                   std::vector<Eigen::Matrix<double,-1,-1>>>>>>(N_groups,
                             std::vector<
                               std::vector<
                                 std::vector<
                                   std::vector<Eigen::Matrix<double,-1,-1>>>>>(N_stations,
                               std::vector<
                                 std::vector<
                                   std::vector<Eigen::Matrix<double,-1,-1>>>>(N_stations,
                                 std::vector<
                                   std::vector<Eigen::Matrix<double,-1,-1>>>(max_t,
                                   std::vector<Eigen::Matrix<double,-1,-1>>(N_batches,
                                     Eigen::Matrix<double,-1,-1>::Constant(max_t,
                                       max_a_overall,
                                       std::numeric_limits<double>::quiet_NaN()))))));
      {
        std::vector<local_scalar_t__> inits_lambda_array_flat__;
        current_statement__ = 657;
        inits_lambda_array_flat__ = context__.vals_r("inits_lambda_array");
        current_statement__ = 657;
        pos__ = 1;
        current_statement__ = 657;
        for (int sym1__ = 1; sym1__ <= max_a_overall; ++sym1__) {
          current_statement__ = 657;
          for (int sym2__ = 1; sym2__ <= max_t; ++sym2__) {
            current_statement__ = 657;
            for (int sym3__ = 1; sym3__ <= N_batches; ++sym3__) {
              current_statement__ = 657;
              for (int sym4__ = 1; sym4__ <= max_t; ++sym4__) {
                current_statement__ = 657;
                for (int sym5__ = 1; sym5__ <= N_stations; ++sym5__) {
                  current_statement__ = 657;
                  for (int sym6__ = 1; sym6__ <= N_stations; ++sym6__) {
                    current_statement__ = 657;
                    for (int sym7__ = 1; sym7__ <= N_groups; ++sym7__) {
                      current_statement__ = 657;
                      stan::model::assign(inits_lambda_array,
                        inits_lambda_array_flat__[(pos__ - 1)],
                        "assigning variable inits_lambda_array",
                        stan::model::index_uni(sym7__),
                        stan::model::index_uni(sym6__),
                        stan::model::index_uni(sym5__),
                        stan::model::index_uni(sym4__),
                        stan::model::index_uni(sym3__),
                        stan::model::index_uni(sym2__),
                        stan::model::index_uni(sym1__));
                      current_statement__ = 657;
                      pos__ = (pos__ + 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 658;
      stan::math::validate_non_negative_index("min_ageclass_mat",
        "N_stations", N_stations);
      current_statement__ = 659;
      stan::math::validate_non_negative_index("min_ageclass_mat", "max_t",
        max_t);
      current_statement__ = 660;
      context__.validate_dims("data initialization", "min_ageclass_mat",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_stations),
          static_cast<size_t>(max_t)});
      min_ageclass_mat = std::vector<std::vector<int>>(N_stations,
                           std::vector<int>(max_t,
                             std::numeric_limits<int>::min()));
      {
        std::vector<int> min_ageclass_mat_flat__;
        current_statement__ = 660;
        min_ageclass_mat_flat__ = context__.vals_i("min_ageclass_mat");
        current_statement__ = 660;
        pos__ = 1;
        current_statement__ = 660;
        for (int sym1__ = 1; sym1__ <= max_t; ++sym1__) {
          current_statement__ = 660;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 660;
            stan::model::assign(min_ageclass_mat,
              min_ageclass_mat_flat__[(pos__ - 1)],
              "assigning variable min_ageclass_mat",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 660;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 661;
      stan::math::validate_non_negative_index("max_ageclass_mat",
        "N_stations", N_stations);
      current_statement__ = 662;
      stan::math::validate_non_negative_index("max_ageclass_mat", "max_t",
        max_t);
      current_statement__ = 663;
      context__.validate_dims("data initialization", "max_ageclass_mat",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_stations),
          static_cast<size_t>(max_t)});
      max_ageclass_mat = std::vector<std::vector<int>>(N_stations,
                           std::vector<int>(max_t,
                             std::numeric_limits<int>::min()));
      {
        std::vector<int> max_ageclass_mat_flat__;
        current_statement__ = 663;
        max_ageclass_mat_flat__ = context__.vals_i("max_ageclass_mat");
        current_statement__ = 663;
        pos__ = 1;
        current_statement__ = 663;
        for (int sym1__ = 1; sym1__ <= max_t; ++sym1__) {
          current_statement__ = 663;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 663;
            stan::model::assign(max_ageclass_mat,
              max_ageclass_mat_flat__[(pos__ - 1)],
              "assigning variable max_ageclass_mat",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 663;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 664;
      alk_par_eta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 664;
      alk_par_eta_1dim__ = (max_a_overall - 1);
      current_statement__ = 664;
      stan::math::validate_non_negative_index("alk_par_eta",
        "max_a_overall - 1", alk_par_eta_1dim__);
      current_statement__ = 665;
      stan::math::validate_non_negative_index("alk_par_beta", "N_a_parbeta",
        N_a_parbeta);
      current_statement__ = 666;
      stan::math::validate_non_negative_index("theta_params", "N_theta_par",
        N_theta_par);
      current_statement__ = 667;
      stan::math::validate_non_negative_index("p_params", "N_p_par", N_p_par);
      current_statement__ = 668;
      stan::math::validate_non_negative_index("overall_surv",
        "N_overall_surv", N_overall_surv);
      current_statement__ = 669;
      stan::math::validate_non_negative_index("cohort_surv", "N_cohort_surv",
        N_cohort_surv);
      current_statement__ = 670;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 670;
      log_lik_1dim__ = ((N_obsageclass + N_m) + N_l);
      current_statement__ = 670;
      stan::math::validate_non_negative_index("log_lik",
        "N_obsageclass + N_m + N_l", log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = alk_par_eta_1dim__ + N_a_parbeta + N_theta_par +
      N_p_par;
  }
  inline std::string model_name() const final {
    return "model_s4t_cjs_draft6d";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_s4t_cjs_draft6d_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alk_par_eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alk_par_eta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      alk_par_eta = in__.template read_constrain_ordered<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                      alk_par_eta_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> alk_par_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_a_parbeta,
          DUMMY_VAR__);
      current_statement__ = 2;
      alk_par_beta = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(N_a_parbeta);
      Eigen::Matrix<local_scalar_t__,1,-1> theta_params =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_theta_par,
          DUMMY_VAR__);
      current_statement__ = 3;
      theta_params = in__.template read<
                       Eigen::Matrix<local_scalar_t__,1,-1>>(N_theta_par);
      Eigen::Matrix<local_scalar_t__,1,-1> p_params =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_p_par, DUMMY_VAR__);
      current_statement__ = 4;
      p_params = in__.template read<
                   Eigen::Matrix<local_scalar_t__,1,-1>>(N_p_par);
      {
        current_statement__ = 273;
        for (int i = 1; i <= N_theta_par; ++i) {
          current_statement__ = 271;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(theta_params, 0,
                           10));
        }
        current_statement__ = 276;
        for (int i = 1; i <= N_p_par; ++i) {
          current_statement__ = 274;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(p_params, 0, 10));
        }
        current_statement__ = 277;
        lp_accum__.add(stan::math::ordered_logistic_lpmf<false>(obsageclass,
                         stan::math::multiply(mod_mat_a_beta, alk_par_beta),
                         alk_par_eta));
        current_statement__ = 278;
        stan::math::validate_non_negative_index("theta", "N_groups", N_groups);
        current_statement__ = 279;
        stan::math::validate_non_negative_index("theta", "N_stations",
          N_stations);
        current_statement__ = 280;
        stan::math::validate_non_negative_index("theta", "max_t", max_t);
        current_statement__ = 281;
        stan::math::validate_non_negative_index("theta", "N_batches",
          N_batches);
        current_statement__ = 282;
        stan::math::validate_non_negative_index("theta", "max_a_overall",
          max_a_overall);
        current_statement__ = 283;
        stan::math::validate_non_negative_index("theta", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>>
          theta =
          std::vector<
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>(N_stations,
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>(max_t,
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_batches,
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(max_a_overall,
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
                      DUMMY_VAR__))))));
        current_statement__ = 285;
        stan::math::validate_non_negative_index("theta_inv", "N_groups",
          N_groups);
        current_statement__ = 286;
        stan::math::validate_non_negative_index("theta_inv", "N_stations",
          N_stations);
        current_statement__ = 287;
        stan::math::validate_non_negative_index("theta_inv", "max_t", max_t);
        current_statement__ = 288;
        stan::math::validate_non_negative_index("theta_inv", "N_batches",
          N_batches);
        current_statement__ = 289;
        stan::math::validate_non_negative_index("theta_inv", "max_a_overall",
          max_a_overall);
        current_statement__ = 290;
        stan::math::validate_non_negative_index("theta_inv", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>>
          theta_inv =
          std::vector<
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>(N_stations,
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>(max_t,
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_batches,
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(max_a_overall,
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
                      DUMMY_VAR__))))));
        current_statement__ = 292;
        stan::model::assign(theta, inits_theta, "assigning variable theta");
        current_statement__ = 293;
        stan::math::validate_non_negative_index("Theta", "N_groups", N_groups);
        current_statement__ = 294;
        stan::math::validate_non_negative_index("Theta", "N_stations",
          N_stations);
        current_statement__ = 295;
        stan::math::validate_non_negative_index("Theta", "max_t", max_t);
        current_statement__ = 296;
        stan::math::validate_non_negative_index("Theta", "N_batches",
          N_batches);
        current_statement__ = 297;
        stan::math::validate_non_negative_index("Theta", "max_a_overall",
          max_a_overall);
        current_statement__ = 298;
        stan::math::validate_non_negative_index("Theta", "max_a_overall + 1",
          (max_a_overall + 1));
        std::vector<
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>>
          Theta =
          std::vector<
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>>(N_stations,
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>>(max_t,
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_batches,
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(max_a_overall,
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant((max_a_overall
                      + 1), DUMMY_VAR__))))));
        current_statement__ = 300;
        stan::model::assign(Theta, inits_Theta, "assigning variable Theta");
        current_statement__ = 301;
        stan::math::validate_non_negative_index("p_obs", "N_groups", N_groups);
        current_statement__ = 302;
        stan::math::validate_non_negative_index("p_obs", "N_stations",
          N_stations);
        current_statement__ = 303;
        stan::math::validate_non_negative_index("p_obs", "N_batches",
          N_batches);
        current_statement__ = 304;
        stan::math::validate_non_negative_index("p_obs", "max_t", max_t);
        current_statement__ = 305;
        stan::math::validate_non_negative_index("p_obs", "max_a_overall",
          max_a_overall);
        current_statement__ = 306;
        stan::math::validate_non_negative_index("p_obs", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>>
          p_obs =
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(N_groups,
            std::vector<
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(N_stations,
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(N_batches,
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(max_t,
                  Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(max_a_overall,
                    max_a_overall, DUMMY_VAR__)))));
        current_statement__ = 308;
        stan::model::assign(p_obs, inits_p_obs, "assigning variable p_obs");
        current_statement__ = 309;
        stan::math::validate_non_negative_index("mu_indices_theta",
          "N_theta_indices_r", N_theta_indices_r);
        Eigen::Matrix<local_scalar_t__,-1,1> mu_indices_theta =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_theta_indices_r,
            DUMMY_VAR__);
        current_statement__ = 310;
        stan::model::assign(mu_indices_theta,
          stan::math::inv_logit(
            stan::math::multiply(mod_mat_theta,
              stan::math::transpose(theta_params))),
          "assigning variable mu_indices_theta");
        current_statement__ = 319;
        for (int i = 1; i <= N_theta_indices_r; ++i) {
          int a1 = std::numeric_limits<int>::min();
          current_statement__ = 311;
          a1 = stan::model::rvalue(indices_theta, "indices_theta",
                 stan::model::index_uni(i), stan::model::index_uni(1));
          int a2 = std::numeric_limits<int>::min();
          current_statement__ = 312;
          a2 = stan::model::rvalue(indices_theta, "indices_theta",
                 stan::model::index_uni(i), stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 313;
          s = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int j = std::numeric_limits<int>::min();
          current_statement__ = 314;
          j = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(5));
          int b = std::numeric_limits<int>::min();
          current_statement__ = 315;
          b = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(7));
          int g = std::numeric_limits<int>::min();
          current_statement__ = 316;
          g = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(8));
          current_statement__ = 317;
          stan::model::assign(theta,
            stan::model::rvalue(mu_indices_theta, "mu_indices_theta",
              stan::model::index_uni(i)), "assigning variable theta",
            stan::model::index_uni(g), stan::model::index_uni(j),
            stan::model::index_uni(s), stan::model::index_uni(b),
            stan::model::index_uni(a1), stan::model::index_uni(a2));
        }
        current_statement__ = 320;
        stan::math::validate_non_negative_index("mu_indices_p_obs",
          "N_p_indices_r", N_p_indices_r);
        Eigen::Matrix<local_scalar_t__,-1,1> mu_indices_p_obs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_p_indices_r,
            DUMMY_VAR__);
        current_statement__ = 321;
        stan::model::assign(mu_indices_p_obs,
          stan::math::inv_logit(
            stan::math::multiply(mod_mat_p, stan::math::transpose(p_params))),
          "assigning variable mu_indices_p_obs");
        current_statement__ = 330;
        for (int i = 1; i <= N_p_indices_r; ++i) {
          int a1 = std::numeric_limits<int>::min();
          current_statement__ = 322;
          a1 = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                 stan::model::index_uni(i), stan::model::index_uni(1));
          int a2 = std::numeric_limits<int>::min();
          current_statement__ = 323;
          a2 = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                 stan::model::index_uni(i), stan::model::index_uni(2));
          int t = std::numeric_limits<int>::min();
          current_statement__ = 324;
          t = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(4));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 325;
          k = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(6));
          int b = std::numeric_limits<int>::min();
          current_statement__ = 326;
          b = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(7));
          int g = std::numeric_limits<int>::min();
          current_statement__ = 327;
          g = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(8));
          current_statement__ = 328;
          stan::model::assign(p_obs,
            stan::model::rvalue(mu_indices_p_obs, "mu_indices_p_obs",
              stan::model::index_uni(i)), "assigning variable p_obs",
            stan::model::index_uni(g), stan::model::index_uni(k),
            stan::model::index_uni(b), stan::model::index_uni(t),
            stan::model::index_uni(a1), stan::model::index_uni(a2));
        }
        current_statement__ = 353;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 331;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites); ++sym1__) {
            int j;
            current_statement__ = 331;
            j = not_last_sites[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 332;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 351;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              current_statement__ = 349;
              for (int a1 = 1; a1 <=
                   stan::model::rvalue(set_max_a, "set_max_a",
                     stan::model::index_uni(j)); ++a1) {
                std::vector<int> sym1__;
                current_statement__ = 333;
                stan::model::assign(sym1__,
                  stan::model::rvalue(batches_list, "batches_list",
                    stan::model::index_uni(j),
                    stan::model::index_min_max(1,
                      stan::model::rvalue(batches_list_len,
                        "batches_list_len", stan::model::index_uni(j)))),
                  "assigning variable sym1__");
                current_statement__ = 334;
                for (int sym3__ = 1; sym3__ <=
                     stan::math::size(sym1__); ++sym3__) {
                  int b;
                  current_statement__ = 334;
                  b = sym1__[(sym3__ - 1)];
                  current_statement__ = 335;
                  stan::model::assign(Theta,
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(s), stan::model::index_uni(b),
                      stan::model::index_uni(a1), stan::model::index_uni(1)),
                    "assigning variable Theta", stan::model::index_uni(g),
                    stan::model::index_uni(j), stan::model::index_uni(s),
                    stan::model::index_uni(b), stan::model::index_uni(a1),
                    stan::model::index_uni(1));
                  current_statement__ = 342;
                  for (int a2 = 2; a2 <= max_a_overall; ++a2) {
                    current_statement__ = 336;
                    stan::math::validate_non_negative_index("tmp_1s",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<local_scalar_t__,-1,1> tmp_1s =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((a2 -
                        1), DUMMY_VAR__);
                    current_statement__ = 337;
                    stan::model::assign(tmp_1s,
                      stan::math::rep_vector(1.0, (a2 - 1)),
                      "assigning variable tmp_1s");
                    current_statement__ = 338;
                    stan::math::validate_non_negative_index("theta_inv_tmp",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<local_scalar_t__,-1,1> theta_inv_tmp =
                      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((a2 -
                        1), DUMMY_VAR__);
                    current_statement__ = 339;
                    stan::model::assign(theta_inv_tmp,
                      stan::math::subtract(tmp_1s,
                        stan::model::rvalue(theta, "theta",
                          stan::model::index_uni(g),
                          stan::model::index_uni(j),
                          stan::model::index_uni(s),
                          stan::model::index_uni(b),
                          stan::model::index_uni(a1),
                          stan::model::index_min_max(1, (a2 - 1)))),
                      "assigning variable theta_inv_tmp");
                    current_statement__ = 340;
                    stan::model::assign(Theta,
                      (stan::model::rvalue(theta, "theta",
                         stan::model::index_uni(g),
                         stan::model::index_uni(j),
                         stan::model::index_uni(s),
                         stan::model::index_uni(b),
                         stan::model::index_uni(a1),
                         stan::model::index_uni(a2)) *
                      stan::math::prod(theta_inv_tmp)),
                      "assigning variable Theta", stan::model::index_uni(g),
                      stan::model::index_uni(j), stan::model::index_uni(s),
                      stan::model::index_uni(b), stan::model::index_uni(a1),
                      stan::model::index_uni(a2));
                  }
                  current_statement__ = 343;
                  stan::math::validate_non_negative_index("tmp_1s",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<local_scalar_t__,-1,1> tmp_1s =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
                      DUMMY_VAR__);
                  current_statement__ = 344;
                  stan::model::assign(tmp_1s,
                    stan::math::rep_vector(1.0, max_a_overall),
                    "assigning variable tmp_1s");
                  current_statement__ = 345;
                  stan::math::validate_non_negative_index("theta_inv_tmp",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<local_scalar_t__,-1,1> theta_inv_tmp =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
                      DUMMY_VAR__);
                  current_statement__ = 346;
                  stan::model::assign(theta_inv_tmp,
                    stan::math::subtract(tmp_1s,
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(g), stan::model::index_uni(j),
                        stan::model::index_uni(s), stan::model::index_uni(b),
                        stan::model::index_uni(a1),
                        stan::model::index_min_max(1, max_a_overall))),
                    "assigning variable theta_inv_tmp");
                  current_statement__ = 347;
                  stan::model::assign(Theta, stan::math::prod(theta_inv_tmp),
                    "assigning variable Theta", stan::model::index_uni(g),
                    stan::model::index_uni(j), stan::model::index_uni(s),
                    stan::model::index_uni(b), stan::model::index_uni(a1),
                    stan::model::index_uni((max_a_overall + 1)));
                }
              }
            }
          }
        }
        current_statement__ = 354;
        stan::math::validate_non_negative_index("lambda_array", "N_groups",
          N_groups);
        current_statement__ = 355;
        stan::math::validate_non_negative_index("lambda_array", "N_stations",
          N_stations);
        current_statement__ = 356;
        stan::math::validate_non_negative_index("lambda_array", "N_stations",
          N_stations);
        current_statement__ = 357;
        stan::math::validate_non_negative_index("lambda_array", "max_t",
          max_t);
        current_statement__ = 358;
        stan::math::validate_non_negative_index("lambda_array", "N_batches",
          N_batches);
        current_statement__ = 359;
        stan::math::validate_non_negative_index("lambda_array", "max_t",
          max_t);
        current_statement__ = 360;
        stan::math::validate_non_negative_index("lambda_array",
          "max_a_overall", max_a_overall);
        std::vector<
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>
          lambda_array =
          std::vector<
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(N_stations,
              std::vector<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(N_stations,
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(max_t,
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(N_batches,
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(max_t,
                      max_a_overall, DUMMY_VAR__))))));
        current_statement__ = 362;
        stan::model::assign(lambda_array, inits_lambda_array,
          "assigning variable lambda_array");
        current_statement__ = 378;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 363;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites); ++sym1__) {
            int j;
            current_statement__ = 363;
            j = not_last_sites[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 364;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 376;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              std::vector<int> sym1__;
              current_statement__ = 365;
              stan::model::assign(sym1__,
                stan::model::rvalue(batches_list, "batches_list",
                  stan::model::index_uni(j),
                  stan::model::index_min_max(1,
                    stan::model::rvalue(batches_list_len, "batches_list_len",
                      stan::model::index_uni(j)))),
                "assigning variable sym1__");
              current_statement__ = 366;
              for (int sym3__ = 1; sym3__ <=
                   stan::math::size(sym1__); ++sym3__) {
                int b;
                current_statement__ = 366;
                b = sym1__[(sym3__ - 1)];
                current_statement__ = 374;
                for (int a1 = 1; a1 <=
                     stan::model::rvalue(set_max_a, "set_max_a",
                       stan::model::index_uni(j)); ++a1) {
                  std::vector<int> tmp_t_opts =
                    std::vector<int>(2, std::numeric_limits<int>::min());
                  current_statement__ = 367;
                  stan::model::assign(tmp_t_opts,
                    std::vector<int>{stan::model::rvalue(max_t_recap,
                                       "max_t_recap",
                                       stan::model::index_uni(k)), (s +
                      (stan::model::rvalue(set_max_a, "set_max_a",
                         stan::model::index_uni(k)) - a1))},
                    "assigning variable tmp_t_opts");
                  int tmp_max_t = std::numeric_limits<int>::min();
                  current_statement__ = 368;
                  tmp_max_t = stan::math::min(tmp_t_opts);
                  current_statement__ = 372;
                  for (int t = s; t <= tmp_max_t; ++t) {
                    int a2 = std::numeric_limits<int>::min();
                    current_statement__ = 369;
                    a2 = ((a1 + t) - s);
                    current_statement__ = 370;
                    stan::model::assign(lambda_array,
                      stan::model::rvalue(Theta, "Theta",
                        stan::model::index_uni(g), stan::model::index_uni(j),
                        stan::model::index_uni(s), stan::model::index_uni(b),
                        stan::model::index_uni(a1),
                        stan::model::index_uni(a2)),
                      "assigning variable lambda_array",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(k), stan::model::index_uni(t),
                      stan::model::index_uni(b), stan::model::index_uni(s),
                      stan::model::index_uni(a1));
                  }
                }
              }
            }
          }
        }
        current_statement__ = 411;
        for (int g = 1; g <= N_groups; ++g) {
          std::vector<int> sym1__;
          current_statement__ = 379;
          stan::model::assign(sym1__,
            stan::model::rvalue(site_path_length3, "site_path_length3",
              stan::model::index_min_max(1, N_site_path_length3),
              stan::model::index_uni(1)), "assigning variable sym1__");
          current_statement__ = 380;
          for (int sym3__ = 1; sym3__ <= stan::math::size(sym1__); ++sym3__) {
            int j;
            current_statement__ = 380;
            j = sym1__[(sym3__ - 1)];
            current_statement__ = 381;
            stan::math::validate_non_negative_index("tmp_ks",
              "site_path_len[j]",
              stan::model::rvalue(site_path_len, "site_path_len",
                stan::model::index_uni(j)));
            std::vector<int> tmp_ks =
              std::vector<int>(stan::model::rvalue(site_path_len,
                                 "site_path_len", stan::model::index_uni(j)),
                std::numeric_limits<int>::min());
            current_statement__ = 382;
            stan::model::assign(tmp_ks,
              stan::model::rvalue(site_path, "site_path",
                stan::model::index_uni(j),
                stan::model::index_min_max(1,
                  stan::model::rvalue(site_path_len, "site_path_len",
                    stan::model::index_uni(j)))), "assigning variable tmp_ks");
            current_statement__ = 409;
            for (int n_k = 3; n_k <=
                 stan::model::rvalue(site_path_len, "site_path_len",
                   stan::model::index_uni(j)); ++n_k) {
              int k = std::numeric_limits<int>::min();
              current_statement__ = 383;
              k = stan::model::rvalue(tmp_ks, "tmp_ks",
                    stan::model::index_uni(n_k));
              int k_min1 = std::numeric_limits<int>::min();
              current_statement__ = 384;
              k_min1 = stan::model::rvalue(tmp_ks, "tmp_ks",
                         stan::model::index_uni((n_k - 1)));
              {
                std::vector<int> sym1__;
                current_statement__ = 385;
                stan::model::assign(sym1__,
                  stan::model::rvalue(batches_list, "batches_list",
                    stan::model::index_uni(j),
                    stan::model::index_min_max(1,
                      stan::model::rvalue(batches_list_len,
                        "batches_list_len", stan::model::index_uni(j)))),
                  "assigning variable sym1__");
                current_statement__ = 386;
                for (int sym3__ = 1; sym3__ <=
                     stan::math::size(sym1__); ++sym3__) {
                  int b;
                  current_statement__ = 386;
                  b = sym1__[(sym3__ - 1)];
                  current_statement__ = 407;
                  for (int s = 1; s <=
                       stan::model::rvalue(max_s_rel, "max_s_rel",
                         stan::model::index_uni(j)); ++s) {
                    current_statement__ = 405;
                    for (int a1 = 1; a1 <=
                         stan::model::rvalue(set_max_a, "set_max_a",
                           stan::model::index_uni(j)); ++a1) {
                      std::vector<int> tmp_vec =
                        std::vector<int>(2, std::numeric_limits<int>::min());
                      current_statement__ = 387;
                      stan::model::assign(tmp_vec,
                        std::vector<int>{stan::model::rvalue(max_t_recap,
                                           "max_t_recap",
                                           stan::model::index_uni(k)), (s +
                          (stan::model::rvalue(set_max_a, "set_max_a",
                             stan::model::index_uni(k)) - a1))},
                        "assigning variable tmp_vec");
                      int tmp_max_t = std::numeric_limits<int>::min();
                      current_statement__ = 388;
                      tmp_max_t = stan::math::min(tmp_vec);
                      current_statement__ = 403;
                      for (int t = s; t <= tmp_max_t; ++t) {
                        int a2 = std::numeric_limits<int>::min();
                        current_statement__ = 389;
                        a2 = ((a1 + t) - s);
                        std::vector<int> tmp_vec2 =
                          std::vector<int>(2,
                            std::numeric_limits<int>::min());
                        current_statement__ = 390;
                        stan::model::assign(tmp_vec2,
                          std::vector<int>{((t - s) + a1),
                            stan::model::rvalue(set_max_a, "set_max_a",
                              stan::model::index_uni(k))},
                          "assigning variable tmp_vec2");
                        int tmp_upperage = std::numeric_limits<int>::min();
                        current_statement__ = 391;
                        tmp_upperage = stan::math::min(tmp_vec2);
                        current_statement__ = 392;
                        stan::math::validate_non_negative_index(
                          "tmp_lambda1", "t - s + 1", ((t - s) + 1));
                        Eigen::Matrix<local_scalar_t__,-1,1> tmp_lambda1 =
                          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((t
                            - s) + 1), DUMMY_VAR__);
                        current_statement__ = 393;
                        stan::model::assign(tmp_lambda1,
                          stan::math::to_vector(
                            stan::model::rvalue(lambda_array, "lambda_array",
                              stan::model::index_uni(g),
                              stan::model::index_uni(j),
                              stan::model::index_uni(k_min1),
                              stan::model::index_min_max(s, t),
                              stan::model::index_uni(b),
                              stan::model::index_uni(s),
                              stan::model::index_uni(a1))),
                          "assigning variable tmp_lambda1");
                        current_statement__ = 394;
                        stan::math::validate_non_negative_index("tmp_p_obs",
                          "1 + tmp_upperage - a1", ((1 + tmp_upperage) - a1));
                        current_statement__ = 395;
                        stan::math::validate_non_negative_index("tmp_p_obs",
                          "1 + t - s", ((1 + t) - s));
                        Eigen::Matrix<local_scalar_t__,-1,-1> tmp_p_obs =
                          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(((1
                            + tmp_upperage) - a1), ((1 + t) - s),
                            DUMMY_VAR__);
                        current_statement__ = 396;
                        stan::model::assign(tmp_p_obs,
                          stan::math::to_matrix(
                            stan::model::rvalue(p_obs, "p_obs",
                              stan::model::index_uni(g),
                              stan::model::index_uni(k_min1),
                              stan::model::index_uni(b),
                              stan::model::index_min_max(s, t),
                              stan::model::index_uni(a1),
                              stan::model::index_min_max(a1, tmp_upperage))),
                          "assigning variable tmp_p_obs");
                        current_statement__ = 397;
                        stan::math::validate_non_negative_index(
                          "tmp_lambda2", "1 + tmp_upperage - a1", ((1 +
                          tmp_upperage) - a1));
                        current_statement__ = 398;
                        stan::math::validate_non_negative_index(
                          "tmp_lambda2", "1 + t - s", ((1 + t) - s));
                        Eigen::Matrix<local_scalar_t__,-1,-1> tmp_lambda2 =
                          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(((1
                            + tmp_upperage) - a1), ((1 + t) - s),
                            DUMMY_VAR__);
                        current_statement__ = 399;
                        stan::model::assign(tmp_lambda2,
                          stan::model::rvalue(lambda_array, "lambda_array",
                            stan::model::index_uni(g),
                            stan::model::index_uni(k_min1),
                            stan::model::index_uni(k),
                            stan::model::index_uni(t),
                            stan::model::index_uni(b),
                            stan::model::index_min_max(s, t),
                            stan::model::index_min_max(a1, tmp_upperage)),
                          "assigning variable tmp_lambda2");
                        local_scalar_t__ tmp_lambda3 = DUMMY_VAR__;
                        current_statement__ = 400;
                        tmp_lambda3 = stan::math::sum(
                                        stan::math::elt_multiply(tmp_lambda1,
                                          stan::math::elt_multiply(
                                            stan::math::subtract(1,
                                              stan::math::diagonal(tmp_p_obs)),
                                            stan::math::diagonal(tmp_lambda2))));
                        current_statement__ = 401;
                        stan::model::assign(lambda_array, tmp_lambda3,
                          "assigning variable lambda_array",
                          stan::model::index_uni(g),
                          stan::model::index_uni(j),
                          stan::model::index_uni(k),
                          stan::model::index_uni(t),
                          stan::model::index_uni(b),
                          stan::model::index_uni(s),
                          stan::model::index_uni(a1));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 412;
        stan::math::validate_non_negative_index("chi_array", "N_groups",
          N_groups);
        current_statement__ = 413;
        stan::math::validate_non_negative_index("chi_array", "N_stations",
          N_stations);
        current_statement__ = 414;
        stan::math::validate_non_negative_index("chi_array", "N_batches",
          N_batches);
        current_statement__ = 415;
        stan::math::validate_non_negative_index("chi_array", "max_t", max_t);
        current_statement__ = 416;
        stan::math::validate_non_negative_index("chi_array", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>
          chi_array =
          std::vector<
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>>(N_groups,
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(N_stations,
              std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(N_batches,
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(max_t,
                  max_a_overall, DUMMY_VAR__))));
        current_statement__ = 418;
        stan::model::assign(chi_array, inits_chi_array,
          "assigning variable chi_array");
        current_statement__ = 441;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 419;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites_rev); ++sym1__) {
            int j;
            current_statement__ = 419;
            j = not_last_sites_rev[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 420;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 439;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              std::vector<int> sym1__;
              current_statement__ = 421;
              stan::model::assign(sym1__,
                stan::model::rvalue(batches_list, "batches_list",
                  stan::model::index_uni(j),
                  stan::model::index_min_max(1,
                    stan::model::rvalue(batches_list_len, "batches_list_len",
                      stan::model::index_uni(j)))),
                "assigning variable sym1__");
              current_statement__ = 422;
              for (int sym3__ = 1; sym3__ <=
                   stan::math::size(sym1__); ++sym3__) {
                int b;
                current_statement__ = 422;
                b = sym1__[(sym3__ - 1)];
                current_statement__ = 437;
                for (int a1 = 1; a1 <=
                     stan::model::rvalue(set_max_a, "set_max_a",
                       stan::model::index_uni(j)); ++a1) {
                  std::vector<int> tmp_ts =
                    std::vector<int>(2, std::numeric_limits<int>::min());
                  current_statement__ = 423;
                  stan::model::assign(tmp_ts,
                    std::vector<int>{stan::model::rvalue(max_t_recap,
                                       "max_t_recap",
                                       stan::model::index_uni(k)), (s +
                      (stan::model::rvalue(set_max_a, "set_max_a",
                         stan::model::index_uni(k)) - a1))},
                    "assigning variable tmp_ts");
                  int tmp_max_t = std::numeric_limits<int>::min();
                  current_statement__ = 424;
                  tmp_max_t = stan::math::min(tmp_ts);
                  std::vector<int> tmp_ages =
                    std::vector<int>(2, std::numeric_limits<int>::min());
                  current_statement__ = 425;
                  stan::model::assign(tmp_ages,
                    std::vector<int>{stan::model::rvalue(set_max_a,
                                       "set_max_a", stan::model::index_uni(k)),
                      ((tmp_max_t - s) + a1)}, "assigning variable tmp_ages");
                  int tmp_maxage = std::numeric_limits<int>::min();
                  current_statement__ = 426;
                  tmp_maxage = stan::math::min(tmp_ages);
                  current_statement__ = 427;
                  stan::math::validate_non_negative_index("tmp_A",
                    "tmp_maxage - a1 + 1", ((tmp_maxage - a1) + 1));
                  Eigen::Matrix<local_scalar_t__,-1,1> tmp_A =
                    Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((tmp_maxage
                      - a1) + 1), DUMMY_VAR__);
                  current_statement__ = 428;
                  stan::model::assign(tmp_A,
                    stan::model::rvalue(Theta, "Theta",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(s), stan::model::index_uni(b),
                      stan::model::index_uni(a1),
                      stan::model::index_min_max(a1, tmp_maxage)),
                    "assigning variable tmp_A");
                  current_statement__ = 429;
                  stan::math::validate_non_negative_index("tmp_p_obs",
                    "tmp_maxage - a1 + 1", ((tmp_maxage - a1) + 1));
                  current_statement__ = 430;
                  stan::math::validate_non_negative_index("tmp_p_obs",
                    "tmp_max_t - s + 1", ((tmp_max_t - s) + 1));
                  Eigen::Matrix<local_scalar_t__,-1,-1> tmp_p_obs =
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(((tmp_maxage
                      - a1) + 1), ((tmp_max_t - s) + 1), DUMMY_VAR__);
                  current_statement__ = 431;
                  stan::model::assign(tmp_p_obs,
                    stan::math::to_matrix(
                      stan::model::rvalue(p_obs, "p_obs",
                        stan::model::index_uni(g), stan::model::index_uni(k),
                        stan::model::index_uni(b),
                        stan::model::index_min_max(s, tmp_max_t),
                        stan::model::index_uni(a1),
                        stan::model::index_min_max(a1, tmp_maxage))),
                    "assigning variable tmp_p_obs");
                  current_statement__ = 432;
                  stan::math::validate_non_negative_index("tmp_chi",
                    "tmp_maxage - a1 + 1", ((tmp_maxage - a1) + 1));
                  current_statement__ = 433;
                  stan::math::validate_non_negative_index("tmp_chi",
                    "tmp_max_t - s + 1", ((tmp_max_t - s) + 1));
                  Eigen::Matrix<local_scalar_t__,-1,-1> tmp_chi =
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(((tmp_maxage
                      - a1) + 1), ((tmp_max_t - s) + 1), DUMMY_VAR__);
                  current_statement__ = 434;
                  stan::model::assign(tmp_chi,
                    stan::model::rvalue(chi_array, "chi_array",
                      stan::model::index_uni(g), stan::model::index_uni(k),
                      stan::model::index_uni(b),
                      stan::model::index_min_max(s, tmp_max_t),
                      stan::model::index_min_max(a1, tmp_maxage)),
                    "assigning variable tmp_chi");
                  current_statement__ = 435;
                  stan::model::assign(chi_array,
                    (stan::model::rvalue(Theta, "Theta",
                       stan::model::index_uni(g), stan::model::index_uni(j),
                       stan::model::index_uni(s), stan::model::index_uni(b),
                       stan::model::index_uni(a1),
                       stan::model::index_uni((max_a_overall + 1))) +
                    stan::math::sum(
                      stan::math::elt_multiply(
                        stan::math::elt_multiply(tmp_A,
                          stan::math::subtract(1,
                            stan::math::diagonal(tmp_p_obs))),
                        stan::math::diagonal(tmp_chi)))),
                    "assigning variable chi_array",
                    stan::model::index_uni(g), stan::model::index_uni(j),
                    stan::model::index_uni(b), stan::model::index_uni(s),
                    stan::model::index_uni(a1));
                }
              }
            }
          }
        }
        current_statement__ = 442;
        stan::math::validate_non_negative_index("pi_L", "rows(mod_mat_a_L)",
          stan::math::rows(mod_mat_a_L));
        current_statement__ = 443;
        stan::math::validate_non_negative_index("pi_L",
          "num_elements(alk_par_eta) + 1",
          (stan::math::num_elements(alk_par_eta) + 1));
        Eigen::Matrix<local_scalar_t__,-1,-1> pi_L =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::rows(
                                                            mod_mat_a_L),
            (stan::math::num_elements(alk_par_eta) + 1), DUMMY_VAR__);
        current_statement__ = 444;
        stan::model::assign(pi_L,
          predict_ordered_logistic(alk_par_beta, alk_par_eta, mod_mat_a_L,
            max_a_overall, pstream__), "assigning variable pi_L");
        current_statement__ = 445;
        stan::math::validate_non_negative_index("pi_M", "rows(mod_mat_a_M)",
          stan::math::rows(mod_mat_a_M));
        current_statement__ = 446;
        stan::math::validate_non_negative_index("pi_M",
          "num_elements(alk_par_eta) + 1",
          (stan::math::num_elements(alk_par_eta) + 1));
        Eigen::Matrix<local_scalar_t__,-1,-1> pi_M =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::rows(
                                                            mod_mat_a_M),
            (stan::math::num_elements(alk_par_eta) + 1), DUMMY_VAR__);
        current_statement__ = 447;
        stan::model::assign(pi_M,
          predict_ordered_logistic(alk_par_beta, alk_par_eta, mod_mat_a_M,
            max_a_overall, pstream__), "assigning variable pi_M");
        current_statement__ = 448;
        stan::math::validate_non_negative_index("summand_l", "N_l", N_l);
        Eigen::Matrix<local_scalar_t__,-1,1> summand_l =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_l, DUMMY_VAR__);
        current_statement__ = 450;
        for (int sym1__ = 1; sym1__ <= stan::math::size(knownage_l); ++sym1__) {
          int i;
          current_statement__ = 450;
          i = knownage_l[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 451;
          diff_age = (stan::model::rvalue(l_matrix, "l_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(2))
            -
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(5)));
          int k_age = std::numeric_limits<int>::min();
          current_statement__ = 452;
          k_age = (diff_age +
            stan::model::rvalue(obsageclass_L, "obsageclass_L",
              stan::model::index_uni(i)));
          current_statement__ = 453;
          stan::model::assign(summand_l,
            (stan::math::log(
               stan::model::rvalue(chi_array, "chi_array",
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(4))),
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(1))),
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(3))),
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(2))),
                 stan::model::index_uni(k_age))) *
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(6))),
            "assigning variable summand_l", stan::model::index_uni(i));
        }
        current_statement__ = 454;
        for (int sym1__ = 1; sym1__ <=
             stan::math::size(unknownage_l); ++sym1__) {
          int i;
          current_statement__ = 454;
          i = unknownage_l[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 455;
          diff_age = (stan::model::rvalue(l_matrix, "l_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(2))
            -
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(5)));
          current_statement__ = 456;
          stan::math::validate_non_negative_index("pi_age1",
            "max_a_overall - diff_age", (max_a_overall - diff_age));
          Eigen::Matrix<local_scalar_t__,-1,1> pi_age1 =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((max_a_overall -
              diff_age), DUMMY_VAR__);
          current_statement__ = 457;
          stan::model::assign(pi_age1,
            stan::math::transpose(
              stan::model::rvalue(pi_L, "pi_L", stan::model::index_uni(i),
                stan::model::index_min_max(1, (max_a_overall - diff_age)))),
            "assigning variable pi_age1");
          current_statement__ = 458;
          stan::math::validate_non_negative_index("pi_age2", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<local_scalar_t__,-1,1> pi_age2 =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
              DUMMY_VAR__);
          current_statement__ = 459;
          stan::model::assign(pi_age2,
            stan::math::elt_divide(
              stan::math::append_row(stan::math::rep_vector(0.0, diff_age),
                pi_age1), stan::math::sum(pi_age1)),
            "assigning variable pi_age2");
          current_statement__ = 460;
          stan::math::validate_non_negative_index("lik1", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<local_scalar_t__,1,-1> lik1 =
            Eigen::Matrix<local_scalar_t__,1,-1>::Constant(max_a_overall,
              DUMMY_VAR__);
          current_statement__ = 461;
          stan::model::assign(lik1,
            stan::model::rvalue(chi_array, "chi_array",
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(4))),
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(1))),
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(3))),
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(2))),
              stan::model::index_min_max(1, max_a_overall)),
            "assigning variable lik1");
          local_scalar_t__ lik2 = DUMMY_VAR__;
          current_statement__ = 462;
          lik2 = stan::math::dot_product(lik1, pi_age2);
          current_statement__ = 463;
          stan::model::assign(summand_l, (stan::math::log(lik2) *
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(6))),
            "assigning variable summand_l", stan::model::index_uni(i));
        }
        current_statement__ = 464;
        lp_accum__.add(stan::math::sum(summand_l));
        current_statement__ = 465;
        stan::math::validate_non_negative_index("summand_m", "N_m", N_m);
        Eigen::Matrix<local_scalar_t__,-1,1> summand_m =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_m, DUMMY_VAR__);
        current_statement__ = 467;
        for (int sym1__ = 1; sym1__ <= stan::math::size(knownage_m); ++sym1__) {
          int i;
          current_statement__ = 467;
          i = knownage_m[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 468;
          diff_age = (stan::model::rvalue(m_matrix, "m_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(3))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int diff_age_t = std::numeric_limits<int>::min();
          current_statement__ = 469;
          diff_age_t = (stan::model::rvalue(m_matrix, "m_matrix",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 470;
          k = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 471;
          s = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int t = std::numeric_limits<int>::min();
          current_statement__ = 472;
          t = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(4));
          int j_age = std::numeric_limits<int>::min();
          current_statement__ = 473;
          j_age = (diff_age +
            stan::model::rvalue(obsageclass_M, "obsageclass_M",
              stan::model::index_uni(i)));
          local_scalar_t__ tmp_p_obs2 = DUMMY_VAR__;
          current_statement__ = 474;
          tmp_p_obs2 = stan::model::rvalue(p_obs, "p_obs",
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(6))),
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(2))),
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(5))),
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(4))),
                         stan::model::index_uni(j_age),
                         stan::model::index_uni(
                           (stan::model::rvalue(obsageclass_M,
                              "obsageclass_M", stan::model::index_uni(i)) +
                           diff_age_t)));
          local_scalar_t__ lik1 = DUMMY_VAR__;
          current_statement__ = 475;
          lik1 = (tmp_p_obs2 *
            stan::model::rvalue(lambda_array, "lambda_array",
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(6))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(1))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(2))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(4))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(5))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(3))),
              stan::model::index_uni(j_age)));
          current_statement__ = 476;
          stan::model::assign(summand_m, (stan::math::log(lik1) *
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(8))),
            "assigning variable summand_m", stan::model::index_uni(i));
        }
        current_statement__ = 477;
        for (int sym1__ = 1; sym1__ <=
             stan::math::size(unknownage_m); ++sym1__) {
          int i;
          current_statement__ = 477;
          i = unknownage_m[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 478;
          diff_age = (stan::model::rvalue(m_matrix, "m_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(3))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int diff_age_t = std::numeric_limits<int>::min();
          current_statement__ = 479;
          diff_age_t = (stan::model::rvalue(m_matrix, "m_matrix",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 480;
          k = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 481;
          s = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int t = std::numeric_limits<int>::min();
          current_statement__ = 482;
          t = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(4));
          int diff_s_t = std::numeric_limits<int>::min();
          current_statement__ = 483;
          diff_s_t = (t - s);
          current_statement__ = 484;
          stan::math::validate_non_negative_index("tmp_p_obs1",
            "max_a_overall - diff_s_t", (max_a_overall - diff_s_t));
          Eigen::Matrix<local_scalar_t__,-1,1> tmp_p_obs1 =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((max_a_overall -
              diff_s_t), DUMMY_VAR__);
          current_statement__ = 485;
          stan::model::assign(tmp_p_obs1,
            stan::math::diagonal(
              stan::model::rvalue(p_obs, "p_obs",
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(6))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(2))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(5))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(4))),
                stan::model::index_min_max(1, (max_a_overall - diff_s_t)),
                stan::model::index_min_max((1 + diff_s_t), max_a_overall))),
            "assigning variable tmp_p_obs1");
          current_statement__ = 486;
          stan::math::validate_non_negative_index("tmp_p_obs2",
            "max_a_overall", max_a_overall);
          Eigen::Matrix<local_scalar_t__,-1,1> tmp_p_obs2 =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
              DUMMY_VAR__);
          current_statement__ = 487;
          stan::model::assign(tmp_p_obs2,
            stan::math::append_row(tmp_p_obs1,
              stan::math::rep_vector(0.0, diff_s_t)),
            "assigning variable tmp_p_obs2");
          current_statement__ = 488;
          stan::math::validate_non_negative_index("pi_age1",
            "max_a_overall - diff_age", (max_a_overall - diff_age));
          Eigen::Matrix<local_scalar_t__,-1,1> pi_age1 =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((max_a_overall -
              diff_age), DUMMY_VAR__);
          current_statement__ = 489;
          stan::model::assign(pi_age1,
            stan::math::transpose(
              stan::model::rvalue(pi_M, "pi_M", stan::model::index_uni(i),
                stan::model::index_min_max(1, (max_a_overall - diff_age)))),
            "assigning variable pi_age1");
          current_statement__ = 490;
          stan::math::validate_non_negative_index("pi_age2", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<local_scalar_t__,-1,1> pi_age2 =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_a_overall,
              DUMMY_VAR__);
          current_statement__ = 491;
          stan::model::assign(pi_age2,
            stan::math::elt_divide(
              stan::math::append_row(stan::math::rep_vector(0.0, diff_age),
                pi_age1), stan::math::sum(pi_age1)),
            "assigning variable pi_age2");
          current_statement__ = 492;
          stan::math::validate_non_negative_index("lik1", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<local_scalar_t__,1,-1> lik1 =
            Eigen::Matrix<local_scalar_t__,1,-1>::Constant(max_a_overall,
              DUMMY_VAR__);
          current_statement__ = 493;
          stan::model::assign(lik1,
            stan::math::elt_multiply(stan::math::transpose(tmp_p_obs2),
              stan::model::rvalue(lambda_array, "lambda_array",
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(6))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(1))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(2))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(4))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(5))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(3))),
                stan::model::index_min_max(1, max_a_overall))),
            "assigning variable lik1");
          local_scalar_t__ lik2 = DUMMY_VAR__;
          current_statement__ = 494;
          lik2 = stan::math::dot_product(lik1, pi_age2);
          current_statement__ = 495;
          stan::model::assign(summand_m, (stan::math::log(lik2) *
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(8))),
            "assigning variable summand_m", stan::model::index_uni(i));
        }
        current_statement__ = 496;
        lp_accum__.add(stan::math::sum(summand_m));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_s4t_cjs_draft6d_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alk_par_eta =
        Eigen::Matrix<double,-1,1>::Constant(alk_par_eta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alk_par_eta = in__.template read_constrain_ordered<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                      alk_par_eta_1dim__);
      Eigen::Matrix<double,-1,1> alk_par_beta =
        Eigen::Matrix<double,-1,1>::Constant(N_a_parbeta,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alk_par_beta = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(N_a_parbeta);
      Eigen::Matrix<double,1,-1> theta_params =
        Eigen::Matrix<double,1,-1>::Constant(N_theta_par,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      theta_params = in__.template read<
                       Eigen::Matrix<local_scalar_t__,1,-1>>(N_theta_par);
      Eigen::Matrix<double,1,-1> p_params =
        Eigen::Matrix<double,1,-1>::Constant(N_p_par,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      p_params = in__.template read<
                   Eigen::Matrix<local_scalar_t__,1,-1>>(N_p_par);
      out__.write(alk_par_eta);
      out__.write(alk_par_beta);
      out__.write(theta_params);
      out__.write(p_params);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> overall_surv =
        Eigen::Matrix<double,-1,1>::Constant(N_overall_surv,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> cohort_surv =
        Eigen::Matrix<double,-1,1>::Constant(N_cohort_surv,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 10;
        for (int i = 1; i <= N_obsageclass; ++i) {
          current_statement__ = 8;
          stan::model::assign(log_lik,
            stan::math::ordered_logistic_lpmf<false>(
              stan::model::rvalue(obsageclass, "obsageclass",
                stan::model::index_uni(i)),
              stan::math::multiply(
                stan::model::rvalue(mod_mat_a_beta, "mod_mat_a_beta",
                  stan::model::index_uni(i), stan::model::index_omni()),
                alk_par_beta), alk_par_eta), "assigning variable log_lik",
            stan::model::index_uni(i));
        }
        current_statement__ = 11;
        stan::math::validate_non_negative_index("theta", "N_groups", N_groups);
        current_statement__ = 12;
        stan::math::validate_non_negative_index("theta", "N_stations",
          N_stations);
        current_statement__ = 13;
        stan::math::validate_non_negative_index("theta", "max_t", max_t);
        current_statement__ = 14;
        stan::math::validate_non_negative_index("theta", "N_batches",
          N_batches);
        current_statement__ = 15;
        stan::math::validate_non_negative_index("theta", "max_a_overall",
          max_a_overall);
        current_statement__ = 16;
        stan::math::validate_non_negative_index("theta", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<
            std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>
          theta =
          std::vector<
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>(N_stations,
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>(max_t,
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(N_batches,
                  std::vector<Eigen::Matrix<double,-1,1>>(max_a_overall,
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN()))))));
        current_statement__ = 18;
        stan::math::validate_non_negative_index("theta_inv", "N_groups",
          N_groups);
        current_statement__ = 19;
        stan::math::validate_non_negative_index("theta_inv", "N_stations",
          N_stations);
        current_statement__ = 20;
        stan::math::validate_non_negative_index("theta_inv", "max_t", max_t);
        current_statement__ = 21;
        stan::math::validate_non_negative_index("theta_inv", "N_batches",
          N_batches);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("theta_inv", "max_a_overall",
          max_a_overall);
        current_statement__ = 23;
        stan::math::validate_non_negative_index("theta_inv", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<
            std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>
          theta_inv =
          std::vector<
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>(N_stations,
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>(max_t,
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(N_batches,
                  std::vector<Eigen::Matrix<double,-1,1>>(max_a_overall,
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN()))))));
        current_statement__ = 25;
        stan::model::assign(theta, inits_theta, "assigning variable theta");
        current_statement__ = 26;
        stan::math::validate_non_negative_index("Theta", "N_groups", N_groups);
        current_statement__ = 27;
        stan::math::validate_non_negative_index("Theta", "N_stations",
          N_stations);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("Theta", "max_t", max_t);
        current_statement__ = 29;
        stan::math::validate_non_negative_index("Theta", "N_batches",
          N_batches);
        current_statement__ = 30;
        stan::math::validate_non_negative_index("Theta", "max_a_overall",
          max_a_overall);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("Theta", "max_a_overall + 1",
          (max_a_overall + 1));
        std::vector<
          std::vector<
            std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>
          Theta =
          std::vector<
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>>(N_stations,
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>>(max_t,
                std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(N_batches,
                  std::vector<Eigen::Matrix<double,-1,1>>(max_a_overall,
                    Eigen::Matrix<double,-1,1>::Constant((max_a_overall + 1),
                      std::numeric_limits<double>::quiet_NaN()))))));
        current_statement__ = 33;
        stan::model::assign(Theta, inits_Theta, "assigning variable Theta");
        current_statement__ = 34;
        stan::math::validate_non_negative_index("mu_indices_theta",
          "N_theta_indices_r", N_theta_indices_r);
        Eigen::Matrix<double,-1,1> mu_indices_theta =
          Eigen::Matrix<double,-1,1>::Constant(N_theta_indices_r,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 35;
        stan::model::assign(mu_indices_theta,
          stan::math::multiply(mod_mat_theta,
            stan::math::transpose(theta_params)),
          "assigning variable mu_indices_theta");
        current_statement__ = 44;
        for (int i = 1; i <= N_theta_indices_r; ++i) {
          int a1 = std::numeric_limits<int>::min();
          current_statement__ = 36;
          a1 = stan::model::rvalue(indices_theta, "indices_theta",
                 stan::model::index_uni(i), stan::model::index_uni(1));
          int a2 = std::numeric_limits<int>::min();
          current_statement__ = 37;
          a2 = stan::model::rvalue(indices_theta, "indices_theta",
                 stan::model::index_uni(i), stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 38;
          s = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int j = std::numeric_limits<int>::min();
          current_statement__ = 39;
          j = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(5));
          int b = std::numeric_limits<int>::min();
          current_statement__ = 40;
          b = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(7));
          int g = std::numeric_limits<int>::min();
          current_statement__ = 41;
          g = stan::model::rvalue(indices_theta, "indices_theta",
                stan::model::index_uni(i), stan::model::index_uni(8));
          current_statement__ = 42;
          stan::model::assign(theta,
            (stan::model::rvalue(theta, "theta", stan::model::index_uni(g),
               stan::model::index_uni(j), stan::model::index_uni(s),
               stan::model::index_uni(b), stan::model::index_uni(a1),
               stan::model::index_uni(a2)) +
            stan::math::inv_logit(
              stan::model::rvalue(mu_indices_theta, "mu_indices_theta",
                stan::model::index_uni(i)))), "assigning variable theta",
            stan::model::index_uni(g), stan::model::index_uni(j),
            stan::model::index_uni(s), stan::model::index_uni(b),
            stan::model::index_uni(a1), stan::model::index_uni(a2));
        }
        current_statement__ = 71;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 45;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites); ++sym1__) {
            int j;
            current_statement__ = 45;
            j = not_last_sites[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 46;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 69;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              current_statement__ = 67;
              for (int a1 = 1; a1 <=
                   stan::model::rvalue(set_max_a, "set_max_a",
                     stan::model::index_uni(j)); ++a1) {
                std::vector<int> sym1__;
                current_statement__ = 47;
                stan::model::assign(sym1__,
                  stan::model::rvalue(batches_list, "batches_list",
                    stan::model::index_uni(j),
                    stan::model::index_min_max(1,
                      stan::model::rvalue(batches_list_len,
                        "batches_list_len", stan::model::index_uni(j)))),
                  "assigning variable sym1__");
                current_statement__ = 48;
                for (int sym3__ = 1; sym3__ <=
                     stan::math::size(sym1__); ++sym3__) {
                  int b;
                  current_statement__ = 48;
                  b = sym1__[(sym3__ - 1)];
                  current_statement__ = 49;
                  stan::model::assign(Theta,
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(s), stan::model::index_uni(b),
                      stan::model::index_uni(a1), stan::model::index_uni(1)),
                    "assigning variable Theta", stan::model::index_uni(g),
                    stan::model::index_uni(j), stan::model::index_uni(s),
                    stan::model::index_uni(b), stan::model::index_uni(a1),
                    stan::model::index_uni(1));
                  current_statement__ = 58;
                  for (int a2 = 2; a2 <= max_a_overall; ++a2) {
                    current_statement__ = 50;
                    stan::math::validate_non_negative_index("tmp_1s",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<double,-1,1> tmp_1s =
                      Eigen::Matrix<double,-1,1>::Constant((a2 - 1),
                        std::numeric_limits<double>::quiet_NaN());
                    current_statement__ = 51;
                    stan::model::assign(tmp_1s,
                      stan::math::rep_vector(1.0, (a2 - 1)),
                      "assigning variable tmp_1s");
                    current_statement__ = 52;
                    stan::math::validate_non_negative_index("tmp_theta",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<double,-1,1> tmp_theta =
                      Eigen::Matrix<double,-1,1>::Constant((a2 - 1),
                        std::numeric_limits<double>::quiet_NaN());
                    current_statement__ = 53;
                    stan::model::assign(tmp_theta,
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(g), stan::model::index_uni(j),
                        stan::model::index_uni(s), stan::model::index_uni(b),
                        stan::model::index_uni(a1),
                        stan::model::index_min_max(1, (a2 - 1))),
                      "assigning variable tmp_theta");
                    current_statement__ = 54;
                    stan::math::validate_non_negative_index("theta_inv_tmp",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<double,-1,1> theta_inv_tmp =
                      Eigen::Matrix<double,-1,1>::Constant((a2 - 1),
                        std::numeric_limits<double>::quiet_NaN());
                    current_statement__ = 55;
                    stan::model::assign(theta_inv_tmp,
                      stan::math::subtract(tmp_1s, tmp_theta),
                      "assigning variable theta_inv_tmp");
                    current_statement__ = 56;
                    stan::model::assign(Theta,
                      (stan::model::rvalue(theta, "theta",
                         stan::model::index_uni(g),
                         stan::model::index_uni(j),
                         stan::model::index_uni(s),
                         stan::model::index_uni(b),
                         stan::model::index_uni(a1),
                         stan::model::index_uni(a2)) *
                      stan::math::prod(theta_inv_tmp)),
                      "assigning variable Theta", stan::model::index_uni(g),
                      stan::model::index_uni(j), stan::model::index_uni(s),
                      stan::model::index_uni(b), stan::model::index_uni(a1),
                      stan::model::index_uni(a2));
                  }
                  current_statement__ = 59;
                  stan::math::validate_non_negative_index("tmp_1s",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<double,-1,1> tmp_1s =
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 60;
                  stan::model::assign(tmp_1s,
                    stan::math::rep_vector(1.0, max_a_overall),
                    "assigning variable tmp_1s");
                  current_statement__ = 61;
                  stan::math::validate_non_negative_index("tmp_theta",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<double,-1,1> tmp_theta =
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 62;
                  stan::model::assign(tmp_theta,
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(s), stan::model::index_uni(b),
                      stan::model::index_uni(a1),
                      stan::model::index_min_max(1, max_a_overall)),
                    "assigning variable tmp_theta");
                  current_statement__ = 63;
                  stan::math::validate_non_negative_index("theta_inv_tmp",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<double,-1,1> theta_inv_tmp =
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 64;
                  stan::model::assign(theta_inv_tmp,
                    stan::math::subtract(tmp_1s, tmp_theta),
                    "assigning variable theta_inv_tmp");
                  current_statement__ = 65;
                  stan::model::assign(Theta, stan::math::prod(theta_inv_tmp),
                    "assigning variable Theta", stan::model::index_uni(g),
                    stan::model::index_uni(j), stan::model::index_uni(s),
                    stan::model::index_uni(b), stan::model::index_uni(a1),
                    stan::model::index_uni((max_a_overall + 1)));
                }
              }
            }
          }
        }
        current_statement__ = 80;
        for (int i = 1; i <= N_overall_surv_r; ++i) {
          int j = std::numeric_limits<int>::min();
          current_statement__ = 72;
          j = stan::model::rvalue(indices_overall_surv,
                "indices_overall_surv", stan::model::index_uni(i),
                stan::model::index_uni(1));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 73;
          k = stan::model::rvalue(indices_overall_surv,
                "indices_overall_surv", stan::model::index_uni(i),
                stan::model::index_uni(2));
          int a1 = std::numeric_limits<int>::min();
          current_statement__ = 74;
          a1 = stan::model::rvalue(indices_overall_surv,
                 "indices_overall_surv", stan::model::index_uni(i),
                 stan::model::index_uni(3));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 75;
          s = stan::model::rvalue(indices_overall_surv,
                "indices_overall_surv", stan::model::index_uni(i),
                stan::model::index_uni(4));
          int b = std::numeric_limits<int>::min();
          current_statement__ = 76;
          b = stan::model::rvalue(indices_overall_surv,
                "indices_overall_surv", stan::model::index_uni(i),
                stan::model::index_uni(5));
          int g = std::numeric_limits<int>::min();
          current_statement__ = 77;
          g = stan::model::rvalue(indices_overall_surv,
                "indices_overall_surv", stan::model::index_uni(i),
                stan::model::index_uni(6));
          current_statement__ = 78;
          stan::model::assign(overall_surv,
            stan::math::sum(
              stan::model::rvalue(Theta, "Theta", stan::model::index_uni(g),
                stan::model::index_uni(j), stan::model::index_uni(s),
                stan::model::index_uni(b), stan::model::index_uni(a1),
                stan::model::index_min_max(a1,
                  stan::model::rvalue(set_max_a, "set_max_a",
                    stan::model::index_uni(k))))),
            "assigning variable overall_surv", stan::model::index_uni(i));
        }
        current_statement__ = 90;
        for (int i = 1; i <= N_cohort_surv_r; ++i) {
          int a1 = std::numeric_limits<int>::min();
          current_statement__ = 81;
          a1 = stan::model::rvalue(indices_cohort_surv,
                 "indices_cohort_surv", stan::model::index_uni(i),
                 stan::model::index_uni(1));
          int a2 = std::numeric_limits<int>::min();
          current_statement__ = 82;
          a2 = stan::model::rvalue(indices_cohort_surv,
                 "indices_cohort_surv", stan::model::index_uni(i),
                 stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 83;
          s = stan::model::rvalue(indices_cohort_surv, "indices_cohort_surv",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int j = std::numeric_limits<int>::min();
          current_statement__ = 84;
          j = stan::model::rvalue(indices_cohort_surv, "indices_cohort_surv",
                stan::model::index_uni(i), stan::model::index_uni(5));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 85;
          k = stan::model::rvalue(indices_cohort_surv, "indices_cohort_surv",
                stan::model::index_uni(i), stan::model::index_uni(6));
          int b = std::numeric_limits<int>::min();
          current_statement__ = 86;
          b = stan::model::rvalue(indices_cohort_surv, "indices_cohort_surv",
                stan::model::index_uni(i), stan::model::index_uni(7));
          int g = std::numeric_limits<int>::min();
          current_statement__ = 87;
          g = stan::model::rvalue(indices_cohort_surv, "indices_cohort_surv",
                stan::model::index_uni(i), stan::model::index_uni(8));
          current_statement__ = 88;
          stan::model::assign(cohort_surv,
            stan::model::rvalue(Theta, "Theta", stan::model::index_uni(g),
              stan::model::index_uni(j), stan::model::index_uni(s),
              stan::model::index_uni(b), stan::model::index_uni(a1),
              stan::model::index_uni(a2)), "assigning variable cohort_surv",
            stan::model::index_uni(i));
        }
        current_statement__ = 91;
        stan::math::validate_non_negative_index("p_obs", "N_groups", N_groups);
        current_statement__ = 92;
        stan::math::validate_non_negative_index("p_obs", "N_stations",
          N_stations);
        current_statement__ = 93;
        stan::math::validate_non_negative_index("p_obs", "N_batches",
          N_batches);
        current_statement__ = 94;
        stan::math::validate_non_negative_index("p_obs", "max_t", max_t);
        current_statement__ = 95;
        stan::math::validate_non_negative_index("p_obs", "max_a_overall",
          max_a_overall);
        current_statement__ = 96;
        stan::math::validate_non_negative_index("p_obs", "max_a_overall",
          max_a_overall);
        std::vector<
          std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>
          p_obs =
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>(N_groups,
            std::vector<
              std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>(N_stations,
              std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(N_batches,
                std::vector<Eigen::Matrix<double,-1,-1>>(max_t,
                  Eigen::Matrix<double,-1,-1>::Constant(max_a_overall,
                    max_a_overall, std::numeric_limits<double>::quiet_NaN())))));
        current_statement__ = 98;
        stan::model::assign(p_obs, inits_p_obs, "assigning variable p_obs");
        current_statement__ = 99;
        stan::math::validate_non_negative_index("mu_indices_p_obs",
          "N_p_indices_r", N_p_indices_r);
        Eigen::Matrix<double,-1,1> mu_indices_p_obs =
          Eigen::Matrix<double,-1,1>::Constant(N_p_indices_r,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 100;
        stan::model::assign(mu_indices_p_obs,
          stan::math::inv_logit(
            stan::math::multiply(mod_mat_p, stan::math::transpose(p_params))),
          "assigning variable mu_indices_p_obs");
        current_statement__ = 109;
        for (int i = 1; i <= N_p_indices_r; ++i) {
          int a1 = std::numeric_limits<int>::min();
          current_statement__ = 101;
          a1 = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                 stan::model::index_uni(i), stan::model::index_uni(1));
          int a2 = std::numeric_limits<int>::min();
          current_statement__ = 102;
          a2 = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                 stan::model::index_uni(i), stan::model::index_uni(2));
          int t = std::numeric_limits<int>::min();
          current_statement__ = 103;
          t = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(4));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 104;
          k = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(6));
          int b = std::numeric_limits<int>::min();
          current_statement__ = 105;
          b = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(7));
          int g = std::numeric_limits<int>::min();
          current_statement__ = 106;
          g = stan::model::rvalue(indices_p_obs, "indices_p_obs",
                stan::model::index_uni(i), stan::model::index_uni(8));
          current_statement__ = 107;
          stan::model::assign(p_obs,
            stan::model::rvalue(mu_indices_p_obs, "mu_indices_p_obs",
              stan::model::index_uni(i)), "assigning variable p_obs",
            stan::model::index_uni(g), stan::model::index_uni(k),
            stan::model::index_uni(b), stan::model::index_uni(t),
            stan::model::index_uni(a1), stan::model::index_uni(a2));
        }
        current_statement__ = 132;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 110;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites); ++sym1__) {
            int j;
            current_statement__ = 110;
            j = not_last_sites[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 111;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 130;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              current_statement__ = 128;
              for (int a1 = 1; a1 <=
                   stan::model::rvalue(set_max_a, "set_max_a",
                     stan::model::index_uni(j)); ++a1) {
                std::vector<int> sym1__;
                current_statement__ = 112;
                stan::model::assign(sym1__,
                  stan::model::rvalue(batches_list, "batches_list",
                    stan::model::index_uni(j),
                    stan::model::index_min_max(1,
                      stan::model::rvalue(batches_list_len,
                        "batches_list_len", stan::model::index_uni(j)))),
                  "assigning variable sym1__");
                current_statement__ = 113;
                for (int sym3__ = 1; sym3__ <=
                     stan::math::size(sym1__); ++sym3__) {
                  int b;
                  current_statement__ = 113;
                  b = sym1__[(sym3__ - 1)];
                  current_statement__ = 114;
                  stan::model::assign(Theta,
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(s), stan::model::index_uni(b),
                      stan::model::index_uni(a1), stan::model::index_uni(1)),
                    "assigning variable Theta", stan::model::index_uni(g),
                    stan::model::index_uni(j), stan::model::index_uni(s),
                    stan::model::index_uni(b), stan::model::index_uni(a1),
                    stan::model::index_uni(1));
                  current_statement__ = 121;
                  for (int a2 = 2; a2 <= max_a_overall; ++a2) {
                    current_statement__ = 115;
                    stan::math::validate_non_negative_index("tmp_1s",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<double,-1,1> tmp_1s =
                      Eigen::Matrix<double,-1,1>::Constant((a2 - 1),
                        std::numeric_limits<double>::quiet_NaN());
                    current_statement__ = 116;
                    stan::model::assign(tmp_1s,
                      stan::math::rep_vector(1.0, (a2 - 1)),
                      "assigning variable tmp_1s");
                    current_statement__ = 117;
                    stan::math::validate_non_negative_index("theta_inv_tmp",
                      "a2 - 1", (a2 - 1));
                    Eigen::Matrix<double,-1,1> theta_inv_tmp =
                      Eigen::Matrix<double,-1,1>::Constant((a2 - 1),
                        std::numeric_limits<double>::quiet_NaN());
                    current_statement__ = 118;
                    stan::model::assign(theta_inv_tmp,
                      stan::math::subtract(tmp_1s,
                        stan::model::rvalue(theta, "theta",
                          stan::model::index_uni(g),
                          stan::model::index_uni(j),
                          stan::model::index_uni(s),
                          stan::model::index_uni(b),
                          stan::model::index_uni(a1),
                          stan::model::index_min_max(1, (a2 - 1)))),
                      "assigning variable theta_inv_tmp");
                    current_statement__ = 119;
                    stan::model::assign(Theta,
                      (stan::model::rvalue(theta, "theta",
                         stan::model::index_uni(g),
                         stan::model::index_uni(j),
                         stan::model::index_uni(s),
                         stan::model::index_uni(b),
                         stan::model::index_uni(a1),
                         stan::model::index_uni(a2)) *
                      stan::math::prod(theta_inv_tmp)),
                      "assigning variable Theta", stan::model::index_uni(g),
                      stan::model::index_uni(j), stan::model::index_uni(s),
                      stan::model::index_uni(b), stan::model::index_uni(a1),
                      stan::model::index_uni(a2));
                  }
                  current_statement__ = 122;
                  stan::math::validate_non_negative_index("tmp_1s",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<double,-1,1> tmp_1s =
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 123;
                  stan::model::assign(tmp_1s,
                    stan::math::rep_vector(1.0, max_a_overall),
                    "assigning variable tmp_1s");
                  current_statement__ = 124;
                  stan::math::validate_non_negative_index("theta_inv_tmp",
                    "max_a_overall", max_a_overall);
                  Eigen::Matrix<double,-1,1> theta_inv_tmp =
                    Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 125;
                  stan::model::assign(theta_inv_tmp,
                    stan::math::subtract(tmp_1s,
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(g), stan::model::index_uni(j),
                        stan::model::index_uni(s), stan::model::index_uni(b),
                        stan::model::index_uni(a1),
                        stan::model::index_min_max(1, max_a_overall))),
                    "assigning variable theta_inv_tmp");
                  current_statement__ = 126;
                  stan::model::assign(Theta, stan::math::prod(theta_inv_tmp),
                    "assigning variable Theta", stan::model::index_uni(g),
                    stan::model::index_uni(j), stan::model::index_uni(s),
                    stan::model::index_uni(b), stan::model::index_uni(a1),
                    stan::model::index_uni((max_a_overall + 1)));
                }
              }
            }
          }
        }
        current_statement__ = 133;
        stan::math::validate_non_negative_index("lambda_array", "N_groups",
          N_groups);
        current_statement__ = 134;
        stan::math::validate_non_negative_index("lambda_array", "N_stations",
          N_stations);
        current_statement__ = 135;
        stan::math::validate_non_negative_index("lambda_array", "N_stations",
          N_stations);
        current_statement__ = 136;
        stan::math::validate_non_negative_index("lambda_array", "max_t",
          max_t);
        current_statement__ = 137;
        stan::math::validate_non_negative_index("lambda_array", "N_batches",
          N_batches);
        current_statement__ = 138;
        stan::math::validate_non_negative_index("lambda_array", "max_t",
          max_t);
        current_statement__ = 139;
        stan::math::validate_non_negative_index("lambda_array",
          "max_a_overall", max_a_overall);
        std::vector<
          std::vector<
            std::vector<
              std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>>
          lambda_array =
          std::vector<
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>>(N_groups,
            std::vector<
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>>(N_stations,
              std::vector<
                std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>(N_stations,
                std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(max_t,
                  std::vector<Eigen::Matrix<double,-1,-1>>(N_batches,
                    Eigen::Matrix<double,-1,-1>::Constant(max_t,
                      max_a_overall,
                      std::numeric_limits<double>::quiet_NaN()))))));
        current_statement__ = 141;
        stan::model::assign(lambda_array, inits_lambda_array,
          "assigning variable lambda_array");
        current_statement__ = 157;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 142;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites); ++sym1__) {
            int j;
            current_statement__ = 142;
            j = not_last_sites[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 143;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 155;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              std::vector<int> sym1__;
              current_statement__ = 144;
              stan::model::assign(sym1__,
                stan::model::rvalue(batches_list, "batches_list",
                  stan::model::index_uni(j),
                  stan::model::index_min_max(1,
                    stan::model::rvalue(batches_list_len, "batches_list_len",
                      stan::model::index_uni(j)))),
                "assigning variable sym1__");
              current_statement__ = 145;
              for (int sym3__ = 1; sym3__ <=
                   stan::math::size(sym1__); ++sym3__) {
                int b;
                current_statement__ = 145;
                b = sym1__[(sym3__ - 1)];
                current_statement__ = 153;
                for (int a1 = 1; a1 <=
                     stan::model::rvalue(set_max_a, "set_max_a",
                       stan::model::index_uni(j)); ++a1) {
                  std::vector<int> tmp_t_opts =
                    std::vector<int>(2, std::numeric_limits<int>::min());
                  current_statement__ = 146;
                  stan::model::assign(tmp_t_opts,
                    std::vector<int>{stan::model::rvalue(max_t_recap,
                                       "max_t_recap",
                                       stan::model::index_uni(k)), (s +
                      (stan::model::rvalue(set_max_a, "set_max_a",
                         stan::model::index_uni(k)) - a1))},
                    "assigning variable tmp_t_opts");
                  int tmp_max_t = std::numeric_limits<int>::min();
                  current_statement__ = 147;
                  tmp_max_t = stan::math::min(tmp_t_opts);
                  current_statement__ = 151;
                  for (int t = s; t <= tmp_max_t; ++t) {
                    int a2 = std::numeric_limits<int>::min();
                    current_statement__ = 148;
                    a2 = ((a1 + t) - s);
                    current_statement__ = 149;
                    stan::model::assign(lambda_array,
                      stan::model::rvalue(Theta, "Theta",
                        stan::model::index_uni(g), stan::model::index_uni(j),
                        stan::model::index_uni(s), stan::model::index_uni(b),
                        stan::model::index_uni(a1),
                        stan::model::index_uni(a2)),
                      "assigning variable lambda_array",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(k), stan::model::index_uni(t),
                      stan::model::index_uni(b), stan::model::index_uni(s),
                      stan::model::index_uni(a1));
                  }
                }
              }
            }
          }
        }
        current_statement__ = 190;
        for (int g = 1; g <= N_groups; ++g) {
          std::vector<int> sym1__;
          current_statement__ = 158;
          stan::model::assign(sym1__,
            stan::model::rvalue(site_path_length3, "site_path_length3",
              stan::model::index_min_max(1, N_site_path_length3),
              stan::model::index_uni(1)), "assigning variable sym1__");
          current_statement__ = 159;
          for (int sym3__ = 1; sym3__ <= stan::math::size(sym1__); ++sym3__) {
            int j;
            current_statement__ = 159;
            j = sym1__[(sym3__ - 1)];
            current_statement__ = 160;
            stan::math::validate_non_negative_index("tmp_ks",
              "site_path_len[j]",
              stan::model::rvalue(site_path_len, "site_path_len",
                stan::model::index_uni(j)));
            std::vector<int> tmp_ks =
              std::vector<int>(stan::model::rvalue(site_path_len,
                                 "site_path_len", stan::model::index_uni(j)),
                std::numeric_limits<int>::min());
            current_statement__ = 161;
            stan::model::assign(tmp_ks,
              stan::model::rvalue(site_path, "site_path",
                stan::model::index_uni(j),
                stan::model::index_min_max(1,
                  stan::model::rvalue(site_path_len, "site_path_len",
                    stan::model::index_uni(j)))), "assigning variable tmp_ks");
            current_statement__ = 188;
            for (int n_k = 3; n_k <=
                 stan::model::rvalue(site_path_len, "site_path_len",
                   stan::model::index_uni(j)); ++n_k) {
              int k = std::numeric_limits<int>::min();
              current_statement__ = 162;
              k = stan::model::rvalue(tmp_ks, "tmp_ks",
                    stan::model::index_uni(n_k));
              int k_min1 = std::numeric_limits<int>::min();
              current_statement__ = 163;
              k_min1 = stan::model::rvalue(tmp_ks, "tmp_ks",
                         stan::model::index_uni((n_k - 1)));
              {
                std::vector<int> sym1__;
                current_statement__ = 164;
                stan::model::assign(sym1__,
                  stan::model::rvalue(batches_list, "batches_list",
                    stan::model::index_uni(j),
                    stan::model::index_min_max(1,
                      stan::model::rvalue(batches_list_len,
                        "batches_list_len", stan::model::index_uni(j)))),
                  "assigning variable sym1__");
                current_statement__ = 165;
                for (int sym3__ = 1; sym3__ <=
                     stan::math::size(sym1__); ++sym3__) {
                  int b;
                  current_statement__ = 165;
                  b = sym1__[(sym3__ - 1)];
                  current_statement__ = 186;
                  for (int s = 1; s <=
                       stan::model::rvalue(max_s_rel, "max_s_rel",
                         stan::model::index_uni(j)); ++s) {
                    current_statement__ = 184;
                    for (int a1 = 1; a1 <=
                         stan::model::rvalue(set_max_a, "set_max_a",
                           stan::model::index_uni(j)); ++a1) {
                      std::vector<int> tmp_vec =
                        std::vector<int>(2, std::numeric_limits<int>::min());
                      current_statement__ = 166;
                      stan::model::assign(tmp_vec,
                        std::vector<int>{stan::model::rvalue(max_t_recap,
                                           "max_t_recap",
                                           stan::model::index_uni(k)), (s +
                          (stan::model::rvalue(set_max_a, "set_max_a",
                             stan::model::index_uni(k)) - a1))},
                        "assigning variable tmp_vec");
                      int tmp_max_t = std::numeric_limits<int>::min();
                      current_statement__ = 167;
                      tmp_max_t = stan::math::min(tmp_vec);
                      current_statement__ = 182;
                      for (int t = s; t <= tmp_max_t; ++t) {
                        int a2 = std::numeric_limits<int>::min();
                        current_statement__ = 168;
                        a2 = ((a1 + t) - s);
                        std::vector<int> tmp_vec2 =
                          std::vector<int>(2,
                            std::numeric_limits<int>::min());
                        current_statement__ = 169;
                        stan::model::assign(tmp_vec2,
                          std::vector<int>{((t - s) + a1),
                            stan::model::rvalue(set_max_a, "set_max_a",
                              stan::model::index_uni(k))},
                          "assigning variable tmp_vec2");
                        int tmp_upperage = std::numeric_limits<int>::min();
                        current_statement__ = 170;
                        tmp_upperage = stan::math::min(tmp_vec2);
                        current_statement__ = 171;
                        stan::math::validate_non_negative_index(
                          "tmp_lambda1", "t - s + 1", ((t - s) + 1));
                        Eigen::Matrix<double,-1,1> tmp_lambda1 =
                          Eigen::Matrix<double,-1,1>::Constant(((t - s) + 1),
                            std::numeric_limits<double>::quiet_NaN());
                        current_statement__ = 172;
                        stan::model::assign(tmp_lambda1,
                          stan::math::to_vector(
                            stan::model::rvalue(lambda_array, "lambda_array",
                              stan::model::index_uni(g),
                              stan::model::index_uni(j),
                              stan::model::index_uni(k_min1),
                              stan::model::index_min_max(s, t),
                              stan::model::index_uni(b),
                              stan::model::index_uni(s),
                              stan::model::index_uni(a1))),
                          "assigning variable tmp_lambda1");
                        current_statement__ = 173;
                        stan::math::validate_non_negative_index("tmp_p_obs",
                          "1 + tmp_upperage - a1", ((1 + tmp_upperage) - a1));
                        current_statement__ = 174;
                        stan::math::validate_non_negative_index("tmp_p_obs",
                          "1 + t - s", ((1 + t) - s));
                        Eigen::Matrix<double,-1,-1> tmp_p_obs =
                          Eigen::Matrix<double,-1,-1>::Constant(((1 +
                            tmp_upperage) - a1), ((1 + t) - s),
                            std::numeric_limits<double>::quiet_NaN());
                        current_statement__ = 175;
                        stan::model::assign(tmp_p_obs,
                          stan::math::to_matrix(
                            stan::model::rvalue(p_obs, "p_obs",
                              stan::model::index_uni(g),
                              stan::model::index_uni(k_min1),
                              stan::model::index_uni(b),
                              stan::model::index_min_max(s, t),
                              stan::model::index_uni(a1),
                              stan::model::index_min_max(a1, tmp_upperage))),
                          "assigning variable tmp_p_obs");
                        current_statement__ = 176;
                        stan::math::validate_non_negative_index(
                          "tmp_lambda2", "1 + tmp_upperage - a1", ((1 +
                          tmp_upperage) - a1));
                        current_statement__ = 177;
                        stan::math::validate_non_negative_index(
                          "tmp_lambda2", "1 + t - s", ((1 + t) - s));
                        Eigen::Matrix<double,-1,-1> tmp_lambda2 =
                          Eigen::Matrix<double,-1,-1>::Constant(((1 +
                            tmp_upperage) - a1), ((1 + t) - s),
                            std::numeric_limits<double>::quiet_NaN());
                        current_statement__ = 178;
                        stan::model::assign(tmp_lambda2,
                          stan::model::rvalue(lambda_array, "lambda_array",
                            stan::model::index_uni(g),
                            stan::model::index_uni(k_min1),
                            stan::model::index_uni(k),
                            stan::model::index_uni(t),
                            stan::model::index_uni(b),
                            stan::model::index_min_max(s, t),
                            stan::model::index_min_max(a1, tmp_upperage)),
                          "assigning variable tmp_lambda2");
                        double tmp_lambda3 =
                          std::numeric_limits<double>::quiet_NaN();
                        current_statement__ = 179;
                        tmp_lambda3 = stan::math::sum(
                                        stan::math::elt_multiply(tmp_lambda1,
                                          stan::math::elt_multiply(
                                            stan::math::subtract(1,
                                              stan::math::diagonal(tmp_p_obs)),
                                            stan::math::diagonal(tmp_lambda2))));
                        current_statement__ = 180;
                        stan::model::assign(lambda_array, tmp_lambda3,
                          "assigning variable lambda_array",
                          stan::model::index_uni(g),
                          stan::model::index_uni(j),
                          stan::model::index_uni(k),
                          stan::model::index_uni(t),
                          stan::model::index_uni(b),
                          stan::model::index_uni(s),
                          stan::model::index_uni(a1));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 191;
        stan::math::validate_non_negative_index("chi_array", "N_groups",
          N_groups);
        current_statement__ = 192;
        stan::math::validate_non_negative_index("chi_array", "N_stations",
          N_stations);
        current_statement__ = 193;
        stan::math::validate_non_negative_index("chi_array", "N_batches",
          N_batches);
        current_statement__ = 194;
        stan::math::validate_non_negative_index("chi_array", "max_t", max_t);
        current_statement__ = 195;
        stan::math::validate_non_negative_index("chi_array", "max_a_overall",
          max_a_overall);
        std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>
          chi_array =
          std::vector<std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>>(N_groups,
            std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(N_stations,
              std::vector<Eigen::Matrix<double,-1,-1>>(N_batches,
                Eigen::Matrix<double,-1,-1>::Constant(max_t, max_a_overall,
                  std::numeric_limits<double>::quiet_NaN()))));
        current_statement__ = 197;
        stan::model::assign(chi_array, inits_chi_array,
          "assigning variable chi_array");
        current_statement__ = 220;
        for (int g = 1; g <= N_groups; ++g) {
          current_statement__ = 198;
          for (int sym1__ = 1; sym1__ <=
               stan::math::size(not_last_sites_rev); ++sym1__) {
            int j;
            current_statement__ = 198;
            j = not_last_sites_rev[(sym1__ - 1)];
            int k = std::numeric_limits<int>::min();
            current_statement__ = 199;
            k = stan::model::rvalue(next_site, "next_site",
                  stan::model::index_uni(j));
            current_statement__ = 218;
            for (int s = 1; s <=
                 stan::model::rvalue(max_s_rel, "max_s_rel",
                   stan::model::index_uni(j)); ++s) {
              std::vector<int> sym1__;
              current_statement__ = 200;
              stan::model::assign(sym1__,
                stan::model::rvalue(batches_list, "batches_list",
                  stan::model::index_uni(j),
                  stan::model::index_min_max(1,
                    stan::model::rvalue(batches_list_len, "batches_list_len",
                      stan::model::index_uni(j)))),
                "assigning variable sym1__");
              current_statement__ = 201;
              for (int sym3__ = 1; sym3__ <=
                   stan::math::size(sym1__); ++sym3__) {
                int b;
                current_statement__ = 201;
                b = sym1__[(sym3__ - 1)];
                current_statement__ = 216;
                for (int a1 = 1; a1 <=
                     stan::model::rvalue(set_max_a, "set_max_a",
                       stan::model::index_uni(j)); ++a1) {
                  std::vector<int> tmp_ts =
                    std::vector<int>(2, std::numeric_limits<int>::min());
                  current_statement__ = 202;
                  stan::model::assign(tmp_ts,
                    std::vector<int>{stan::model::rvalue(max_t_recap,
                                       "max_t_recap",
                                       stan::model::index_uni(k)), (s +
                      (stan::model::rvalue(set_max_a, "set_max_a",
                         stan::model::index_uni(k)) - a1))},
                    "assigning variable tmp_ts");
                  int tmp_max_t = std::numeric_limits<int>::min();
                  current_statement__ = 203;
                  tmp_max_t = stan::math::min(tmp_ts);
                  std::vector<int> tmp_ages =
                    std::vector<int>(2, std::numeric_limits<int>::min());
                  current_statement__ = 204;
                  stan::model::assign(tmp_ages,
                    std::vector<int>{stan::model::rvalue(set_max_a,
                                       "set_max_a", stan::model::index_uni(k)),
                      ((tmp_max_t - s) + a1)}, "assigning variable tmp_ages");
                  int tmp_maxage = std::numeric_limits<int>::min();
                  current_statement__ = 205;
                  tmp_maxage = stan::math::min(tmp_ages);
                  current_statement__ = 206;
                  stan::math::validate_non_negative_index("tmp_A",
                    "tmp_maxage - a1 + 1", ((tmp_maxage - a1) + 1));
                  Eigen::Matrix<double,-1,1> tmp_A =
                    Eigen::Matrix<double,-1,1>::Constant(((tmp_maxage - a1) +
                      1), std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 207;
                  stan::model::assign(tmp_A,
                    stan::model::rvalue(Theta, "Theta",
                      stan::model::index_uni(g), stan::model::index_uni(j),
                      stan::model::index_uni(s), stan::model::index_uni(b),
                      stan::model::index_uni(a1),
                      stan::model::index_min_max(a1, tmp_maxage)),
                    "assigning variable tmp_A");
                  current_statement__ = 208;
                  stan::math::validate_non_negative_index("tmp_p_obs",
                    "tmp_maxage - a1 + 1", ((tmp_maxage - a1) + 1));
                  current_statement__ = 209;
                  stan::math::validate_non_negative_index("tmp_p_obs",
                    "tmp_max_t - s + 1", ((tmp_max_t - s) + 1));
                  Eigen::Matrix<double,-1,-1> tmp_p_obs =
                    Eigen::Matrix<double,-1,-1>::Constant(((tmp_maxage - a1)
                      + 1), ((tmp_max_t - s) + 1),
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 210;
                  stan::model::assign(tmp_p_obs,
                    stan::math::to_matrix(
                      stan::model::rvalue(p_obs, "p_obs",
                        stan::model::index_uni(g), stan::model::index_uni(k),
                        stan::model::index_uni(b),
                        stan::model::index_min_max(s, tmp_max_t),
                        stan::model::index_uni(a1),
                        stan::model::index_min_max(a1, tmp_maxage))),
                    "assigning variable tmp_p_obs");
                  current_statement__ = 211;
                  stan::math::validate_non_negative_index("tmp_chi",
                    "tmp_maxage - a1 + 1", ((tmp_maxage - a1) + 1));
                  current_statement__ = 212;
                  stan::math::validate_non_negative_index("tmp_chi",
                    "tmp_max_t - s + 1", ((tmp_max_t - s) + 1));
                  Eigen::Matrix<double,-1,-1> tmp_chi =
                    Eigen::Matrix<double,-1,-1>::Constant(((tmp_maxage - a1)
                      + 1), ((tmp_max_t - s) + 1),
                      std::numeric_limits<double>::quiet_NaN());
                  current_statement__ = 213;
                  stan::model::assign(tmp_chi,
                    stan::model::rvalue(chi_array, "chi_array",
                      stan::model::index_uni(g), stan::model::index_uni(k),
                      stan::model::index_uni(b),
                      stan::model::index_min_max(s, tmp_max_t),
                      stan::model::index_min_max(a1, tmp_maxage)),
                    "assigning variable tmp_chi");
                  current_statement__ = 214;
                  stan::model::assign(chi_array,
                    (stan::model::rvalue(Theta, "Theta",
                       stan::model::index_uni(g), stan::model::index_uni(j),
                       stan::model::index_uni(s), stan::model::index_uni(b),
                       stan::model::index_uni(a1),
                       stan::model::index_uni((max_a_overall + 1))) +
                    stan::math::sum(
                      stan::math::elt_multiply(
                        stan::math::elt_multiply(tmp_A,
                          stan::math::subtract(1,
                            stan::math::diagonal(tmp_p_obs))),
                        stan::math::diagonal(tmp_chi)))),
                    "assigning variable chi_array",
                    stan::model::index_uni(g), stan::model::index_uni(j),
                    stan::model::index_uni(b), stan::model::index_uni(s),
                    stan::model::index_uni(a1));
                }
              }
            }
          }
        }
        current_statement__ = 221;
        stan::math::validate_non_negative_index("pi_L", "rows(mod_mat_a_L)",
          stan::math::rows(mod_mat_a_L));
        current_statement__ = 222;
        stan::math::validate_non_negative_index("pi_L",
          "num_elements(alk_par_eta) + 1",
          (stan::math::num_elements(alk_par_eta) + 1));
        Eigen::Matrix<double,-1,-1> pi_L =
          Eigen::Matrix<double,-1,-1>::Constant(stan::math::rows(mod_mat_a_L),
            (stan::math::num_elements(alk_par_eta) + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 223;
        stan::model::assign(pi_L,
          predict_ordered_logistic(alk_par_beta, alk_par_eta, mod_mat_a_L,
            max_a_overall, pstream__), "assigning variable pi_L");
        current_statement__ = 224;
        stan::math::validate_non_negative_index("pi_M", "rows(mod_mat_a_M)",
          stan::math::rows(mod_mat_a_M));
        current_statement__ = 225;
        stan::math::validate_non_negative_index("pi_M",
          "num_elements(alk_par_eta) + 1",
          (stan::math::num_elements(alk_par_eta) + 1));
        Eigen::Matrix<double,-1,-1> pi_M =
          Eigen::Matrix<double,-1,-1>::Constant(stan::math::rows(mod_mat_a_M),
            (stan::math::num_elements(alk_par_eta) + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 226;
        stan::model::assign(pi_M,
          predict_ordered_logistic(alk_par_beta, alk_par_eta, mod_mat_a_M,
            max_a_overall, pstream__), "assigning variable pi_M");
        current_statement__ = 227;
        for (int sym1__ = 1; sym1__ <= stan::math::size(knownage_l); ++sym1__) {
          int i;
          current_statement__ = 227;
          i = knownage_l[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 228;
          diff_age = (stan::model::rvalue(l_matrix, "l_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(2))
            -
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(5)));
          int k_age = std::numeric_limits<int>::min();
          current_statement__ = 229;
          k_age = (diff_age +
            stan::model::rvalue(obsageclass_L, "obsageclass_L",
              stan::model::index_uni(i)));
          current_statement__ = 230;
          stan::model::assign(log_lik,
            (stan::math::log(
               stan::model::rvalue(chi_array, "chi_array",
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(4))),
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(1))),
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(3))),
                 stan::model::index_uni(
                   stan::model::rvalue(l_matrix, "l_matrix",
                     stan::model::index_uni(i), stan::model::index_uni(2))),
                 stan::model::index_uni(k_age))) *
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(6))),
            "assigning variable log_lik",
            stan::model::index_uni((N_obsageclass + i)));
        }
        current_statement__ = 231;
        for (int sym1__ = 1; sym1__ <=
             stan::math::size(unknownage_l); ++sym1__) {
          int i;
          current_statement__ = 231;
          i = unknownage_l[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 232;
          diff_age = (stan::model::rvalue(l_matrix, "l_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(2))
            -
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(5)));
          current_statement__ = 233;
          stan::math::validate_non_negative_index("pi_age1",
            "max_a_overall - diff_age", (max_a_overall - diff_age));
          Eigen::Matrix<double,-1,1> pi_age1 =
            Eigen::Matrix<double,-1,1>::Constant((max_a_overall - diff_age),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 234;
          stan::model::assign(pi_age1,
            stan::math::transpose(
              stan::model::rvalue(pi_L, "pi_L", stan::model::index_uni(i),
                stan::model::index_min_max(1, (max_a_overall - diff_age)))),
            "assigning variable pi_age1");
          current_statement__ = 235;
          stan::math::validate_non_negative_index("pi_age2", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<double,-1,1> pi_age2 =
            Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 236;
          stan::model::assign(pi_age2,
            stan::math::elt_divide(
              stan::math::append_row(stan::math::rep_vector(0.0, diff_age),
                pi_age1), stan::math::sum(pi_age1)),
            "assigning variable pi_age2");
          current_statement__ = 237;
          stan::math::validate_non_negative_index("lik1", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<double,1,-1> lik1 =
            Eigen::Matrix<double,1,-1>::Constant(max_a_overall,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 238;
          stan::model::assign(lik1,
            stan::model::rvalue(chi_array, "chi_array",
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(4))),
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(1))),
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(3))),
              stan::model::index_uni(
                stan::model::rvalue(l_matrix, "l_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(2))),
              stan::model::index_min_max(1, max_a_overall)),
            "assigning variable lik1");
          double lik2 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 239;
          lik2 = stan::math::dot_product(lik1, pi_age2);
          current_statement__ = 240;
          stan::model::assign(log_lik, (stan::math::log(lik2) *
            stan::model::rvalue(l_matrix, "l_matrix",
              stan::model::index_uni(i), stan::model::index_uni(6))),
            "assigning variable log_lik",
            stan::model::index_uni((N_obsageclass + i)));
        }
        current_statement__ = 241;
        for (int sym1__ = 1; sym1__ <= stan::math::size(knownage_m); ++sym1__) {
          int i;
          current_statement__ = 241;
          i = knownage_m[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 242;
          diff_age = (stan::model::rvalue(m_matrix, "m_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(3))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int diff_age_t = std::numeric_limits<int>::min();
          current_statement__ = 243;
          diff_age_t = (stan::model::rvalue(m_matrix, "m_matrix",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 244;
          k = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 245;
          s = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int t = std::numeric_limits<int>::min();
          current_statement__ = 246;
          t = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(4));
          int j_age = std::numeric_limits<int>::min();
          current_statement__ = 247;
          j_age = (diff_age +
            stan::model::rvalue(obsageclass_M, "obsageclass_M",
              stan::model::index_uni(i)));
          double tmp_p_obs2 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 248;
          tmp_p_obs2 = stan::model::rvalue(p_obs, "p_obs",
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(6))),
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(2))),
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(5))),
                         stan::model::index_uni(
                           stan::model::rvalue(m_matrix, "m_matrix",
                             stan::model::index_uni(i),
                             stan::model::index_uni(4))),
                         stan::model::index_uni(j_age),
                         stan::model::index_uni(
                           (stan::model::rvalue(obsageclass_M,
                              "obsageclass_M", stan::model::index_uni(i)) +
                           diff_age_t)));
          double lik1 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 249;
          lik1 = (tmp_p_obs2 *
            stan::model::rvalue(lambda_array, "lambda_array",
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(6))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(1))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(2))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(4))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(5))),
              stan::model::index_uni(
                stan::model::rvalue(m_matrix, "m_matrix",
                  stan::model::index_uni(i), stan::model::index_uni(3))),
              stan::model::index_uni(j_age)));
          current_statement__ = 250;
          stan::model::assign(log_lik, (stan::math::log(lik1) *
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(8))),
            "assigning variable log_lik",
            stan::model::index_uni(((N_obsageclass + i) + N_l)));
        }
        current_statement__ = 251;
        for (int sym1__ = 1; sym1__ <=
             stan::math::size(unknownage_m); ++sym1__) {
          int i;
          current_statement__ = 251;
          i = unknownage_m[(sym1__ - 1)];
          int diff_age = std::numeric_limits<int>::min();
          current_statement__ = 252;
          diff_age = (stan::model::rvalue(m_matrix, "m_matrix",
                        stan::model::index_uni(i), stan::model::index_uni(3))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int diff_age_t = std::numeric_limits<int>::min();
          current_statement__ = 253;
          diff_age_t = (stan::model::rvalue(m_matrix, "m_matrix",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4))
            -
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(7)));
          int k = std::numeric_limits<int>::min();
          current_statement__ = 254;
          k = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(2));
          int s = std::numeric_limits<int>::min();
          current_statement__ = 255;
          s = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(3));
          int t = std::numeric_limits<int>::min();
          current_statement__ = 256;
          t = stan::model::rvalue(m_matrix, "m_matrix",
                stan::model::index_uni(i), stan::model::index_uni(4));
          int diff_s_t = std::numeric_limits<int>::min();
          current_statement__ = 257;
          diff_s_t = (t - s);
          current_statement__ = 258;
          stan::math::validate_non_negative_index("tmp_p_obs1",
            "max_a_overall - diff_s_t", (max_a_overall - diff_s_t));
          Eigen::Matrix<double,-1,1> tmp_p_obs1 =
            Eigen::Matrix<double,-1,1>::Constant((max_a_overall - diff_s_t),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 259;
          stan::model::assign(tmp_p_obs1,
            stan::math::diagonal(
              stan::model::rvalue(p_obs, "p_obs",
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(6))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(2))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(5))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(4))),
                stan::model::index_min_max(1, (max_a_overall - diff_s_t)),
                stan::model::index_min_max((1 + diff_s_t), max_a_overall))),
            "assigning variable tmp_p_obs1");
          current_statement__ = 260;
          stan::math::validate_non_negative_index("tmp_p_obs2",
            "max_a_overall", max_a_overall);
          Eigen::Matrix<double,-1,1> tmp_p_obs2 =
            Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 261;
          stan::model::assign(tmp_p_obs2,
            stan::math::append_row(tmp_p_obs1,
              stan::math::rep_vector(0.0, diff_s_t)),
            "assigning variable tmp_p_obs2");
          current_statement__ = 262;
          stan::math::validate_non_negative_index("pi_age1",
            "max_a_overall - diff_age", (max_a_overall - diff_age));
          Eigen::Matrix<double,-1,1> pi_age1 =
            Eigen::Matrix<double,-1,1>::Constant((max_a_overall - diff_age),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 263;
          stan::model::assign(pi_age1,
            stan::math::transpose(
              stan::model::rvalue(pi_M, "pi_M", stan::model::index_uni(i),
                stan::model::index_min_max(1, (max_a_overall - diff_age)))),
            "assigning variable pi_age1");
          current_statement__ = 264;
          stan::math::validate_non_negative_index("pi_age2", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<double,-1,1> pi_age2 =
            Eigen::Matrix<double,-1,1>::Constant(max_a_overall,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 265;
          stan::model::assign(pi_age2,
            stan::math::elt_divide(
              stan::math::append_row(stan::math::rep_vector(0.0, diff_age),
                pi_age1), stan::math::sum(pi_age1)),
            "assigning variable pi_age2");
          current_statement__ = 266;
          stan::math::validate_non_negative_index("lik1", "max_a_overall",
            max_a_overall);
          Eigen::Matrix<double,1,-1> lik1 =
            Eigen::Matrix<double,1,-1>::Constant(max_a_overall,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 267;
          stan::model::assign(lik1,
            stan::math::elt_multiply(stan::math::transpose(tmp_p_obs2),
              stan::model::rvalue(lambda_array, "lambda_array",
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(6))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(1))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(2))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(4))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(5))),
                stan::model::index_uni(
                  stan::model::rvalue(m_matrix, "m_matrix",
                    stan::model::index_uni(i), stan::model::index_uni(3))),
                stan::model::index_min_max(1, max_a_overall))),
            "assigning variable lik1");
          double lik2 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 268;
          lik2 = stan::math::dot_product(lik1, pi_age2);
          current_statement__ = 269;
          stan::model::assign(log_lik, (stan::math::log(lik2) *
            stan::model::rvalue(m_matrix, "m_matrix",
              stan::model::index_uni(i), stan::model::index_uni(8))),
            "assigning variable log_lik",
            stan::model::index_uni(((N_obsageclass + i) + N_l)));
        }
      }
      out__.write(overall_surv);
      out__.write(cohort_surv);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alk_par_eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alk_par_eta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alk_par_eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(alk_par_eta_1dim__),
        "assigning variable alk_par_eta");
      out__.write_free_ordered(alk_par_eta);
      Eigen::Matrix<local_scalar_t__,-1,1> alk_par_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_a_parbeta,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alk_par_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_a_parbeta),
        "assigning variable alk_par_beta");
      out__.write(alk_par_beta);
      Eigen::Matrix<local_scalar_t__,1,-1> theta_params =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_theta_par,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(theta_params,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(N_theta_par),
        "assigning variable theta_params");
      out__.write(theta_params);
      Eigen::Matrix<local_scalar_t__,1,-1> p_params =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_p_par, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(p_params,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(N_p_par),
        "assigning variable p_params");
      out__.write(p_params);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alk_par_eta",
        "double",
        std::vector<size_t>{static_cast<size_t>(alk_par_eta_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alk_par_beta",
        "double", std::vector<size_t>{static_cast<size_t>(N_a_parbeta)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "theta_params",
        "double", std::vector<size_t>{static_cast<size_t>(N_theta_par)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "p_params",
        "double", std::vector<size_t>{static_cast<size_t>(N_p_par)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alk_par_eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alk_par_eta_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alk_par_eta_flat__;
        current_statement__ = 1;
        alk_par_eta_flat__ = context__.vals_r("alk_par_eta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= alk_par_eta_1dim__; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alk_par_eta, alk_par_eta_flat__[(pos__ - 1)],
            "assigning variable alk_par_eta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_ordered(alk_par_eta);
      Eigen::Matrix<local_scalar_t__,-1,1> alk_par_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_a_parbeta,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alk_par_beta_flat__;
        current_statement__ = 2;
        alk_par_beta_flat__ = context__.vals_r("alk_par_beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_a_parbeta; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(alk_par_beta, alk_par_beta_flat__[(pos__ - 1)],
            "assigning variable alk_par_beta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alk_par_beta);
      Eigen::Matrix<local_scalar_t__,1,-1> theta_params =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_theta_par,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_params_flat__;
        current_statement__ = 3;
        theta_params_flat__ = context__.vals_r("theta_params");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_theta_par; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(theta_params, theta_params_flat__[(pos__ - 1)],
            "assigning variable theta_params", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta_params);
      Eigen::Matrix<local_scalar_t__,1,-1> p_params =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_p_par, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_params_flat__;
        current_statement__ = 4;
        p_params_flat__ = context__.vals_r("p_params");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_p_par; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(p_params, p_params_flat__[(pos__ - 1)],
            "assigning variable p_params", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(p_params);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alk_par_eta", "alk_par_beta",
                "theta_params", "p_params"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"overall_surv", "cohort_surv", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    alk_par_eta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(N_a_parbeta)},
                std::vector<size_t>{static_cast<size_t>(N_theta_par)},
                std::vector<size_t>{static_cast<size_t>(N_p_par)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_overall_surv)},
             std::vector<size_t>{static_cast<size_t>(N_cohort_surv)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alk_par_eta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alk_par_eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_a_parbeta; ++sym1__) {
      param_names__.emplace_back(std::string() + "alk_par_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_theta_par; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_params" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_p_par; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_params" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_overall_surv; ++sym1__) {
        param_names__.emplace_back(std::string() + "overall_surv" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_cohort_surv; ++sym1__) {
        param_names__.emplace_back(std::string() + "cohort_surv" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alk_par_eta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alk_par_eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_a_parbeta; ++sym1__) {
      param_names__.emplace_back(std::string() + "alk_par_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_theta_par; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_params" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_p_par; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_params" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_overall_surv; ++sym1__) {
        param_names__.emplace_back(std::string() + "overall_surv" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_cohort_surv; ++sym1__) {
        param_names__.emplace_back(std::string() + "cohort_surv" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alk_par_eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alk_par_eta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alk_par_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_a_parbeta) + "},\"block\":\"parameters\"},{\"name\":\"theta_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_theta_par) + "},\"block\":\"parameters\"},{\"name\":\"p_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_p_par) + "},\"block\":\"parameters\"},{\"name\":\"overall_surv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_overall_surv) + "},\"block\":\"generated_quantities\"},{\"name\":\"cohort_surv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_cohort_surv) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alk_par_eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alk_par_eta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alk_par_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_a_parbeta) + "},\"block\":\"parameters\"},{\"name\":\"theta_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_theta_par) + "},\"block\":\"parameters\"},{\"name\":\"p_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_p_par) + "},\"block\":\"parameters\"},{\"name\":\"overall_surv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_overall_surv) + "},\"block\":\"generated_quantities\"},{\"name\":\"cohort_surv\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_cohort_surv) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((alk_par_eta_1dim__ + N_a_parbeta) +
      N_theta_par) + N_p_par);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      (((N_overall_surv + N_cohort_surv) + log_lik_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((alk_par_eta_1dim__ + N_a_parbeta) +
      N_theta_par) + N_p_par);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      (((N_overall_surv + N_cohort_surv) + log_lik_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_s4t_cjs_draft6d_namespace::model_s4t_cjs_draft6d;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_s4t_cjs_draft6d_namespace::profiles__;
}
#endif
#endif
